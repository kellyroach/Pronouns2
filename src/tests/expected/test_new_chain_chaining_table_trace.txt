################################################################
#
#     test_new_chain_chaining_table_trace.txt
#
################################################################

################################################################
#
#     (1.1) The boy who was fooling her kissed the girl who loved him.
#
################################################################

chaining
    init_table

___________CHAINING___________
!      !      !       !      !
! boy  ! her  ! girl  ! him  !
! boyA ! herA ! girlA ! himA !
!______!______!_______!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, girl)
                sc(him, girl) = True
                agr(him, girl) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, her)
                sc(him, her) = True
                agr(him, her) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, boy)
                sc(him, boy) = True
                agr(him, boy) = True
                rnr(him, boy) = True
                chaining_e_to_n(himA, boy)
                    agr(himA, boy) = True
                    new_chain(himA, boy)
                        new_chain: create boyB
                        new_chain: create boyB^himA

______________CHAINING_____________
!           !      !       !      !
! boy       ! her  ! girl  ! him  !
! boyA      ! herA ! girlA ! himA !
! boyB^himA !      !       !      !
!___________!______!_______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, him)
                sc(her, him) = True
                agr(her, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, girl)
                sc(her, girl) = True
                agr(her, girl) = True
                rnr(her, girl) = True
                chaining_e_to_n(herA, girl)
                    agr(herA, girl) = True
                    new_chain(herA, girl)
                        new_chain: create girlB
                        new_chain: create girlB^herA

________________CHAINING________________
!           !      !            !      !
! boy       ! her  ! girl       ! him  !
! boyA      ! herA ! girlA      ! himA !
! boyB^himA !      ! girlB^herA !      !
!___________!______!____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(her, boy)
                sc(her, boy) = True
                agr(her, boy) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.2) *John killed herself.
#
################################################################

chaining
    init_table

______CHAINING______
!       !          !
! John  ! herself  !
! JohnA ! herselfA !
!_______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: John
            chaining_n_to_n(herself, John)
                sc(herself, John) = True
                agr(herself, John) = False
            chaining_n_to_n: exiting
            simplex_pred(John)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.4) Some students think they are smarter than they are.
#
################################################################

chaining
    init_table

_______CHAINING______
!           !       !
! students  ! they  !
! studentsA ! theyA !
!___________!_______!

    init_table: exiting
    chaining_n(they)
        non_refl_chaining(they)
            chaining_n_to_n(they, students)
                sc(they, students) = True
                agr(they, students) = True
                rnr(they, students) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.6) My uncle has never ridden a camel but his brother has, although it was lame.
#
################################################################

chaining
    init_table

_____________________CHAINING____________________
!     !        !        !      !          !     !
! my  ! uncle  ! camel  ! his  ! brother  ! it  !
! myA ! uncleA ! camelA ! hisA ! brotherA ! itA !
!_____!________!________!______!__________!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, brother)
                sc(it, brother) = True
                agr(it, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, his)
                sc(it, his) = True
                agr(it, his) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, camel)
                sc(it, camel) = True
                agr(it, camel) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, uncle)
                sc(it, uncle) = True
                agr(it, uncle) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, my)
                sc(it, my) = True
                agr(it, my) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(his)
        non_refl_chaining(his)
            chaining_n_to_n(his, it)
                sc(his, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(his, brother)
                sc(his, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(his, camel)
                sc(his, camel) = True
                agr(his, camel) = True
                rnr(his, camel) = True
                chaining_e_to_n(hisA, camel)
                    agr(hisA, camel) = True
                    new_chain(hisA, camel)
                        new_chain: create camelB
                        new_chain: create camelB^hisA

_______________________CHAINING_______________________
!     !        !             !      !          !     !
! my  ! uncle  ! camel       ! his  ! brother  ! it  !
! myA ! uncleA ! camelA      ! hisA ! brotherA ! itA !
!     !        ! camelB^hisA !      !          !     !
!_____!________!_____________!______!__________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(his, uncle)
                sc(his, uncle) = True
                agr(his, uncle) = True
                rnr(his, uncle) = True
                chaining_e_to_n(hisA, uncle)
                    agr(hisA, uncle) = True
                    new_chain(hisA, uncle)
                        new_chain: create uncleB
                        new_chain: create uncleB^hisA

__________________________CHAINING_________________________
!     !             !             !      !          !     !
! my  ! uncle       ! camel       ! his  ! brother  ! it  !
! myA ! uncleA      ! camelA      ! hisA ! brotherA ! itA !
!     ! uncleB^hisA ! camelB^hisA !      !          !     !
!_____!_____________!_____________!______!__________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(his, my)
                sc(his, my) = True
                agr(his, my) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(my)
        non_refl_chaining(my)
            chaining_n_to_n(my, it)
                sc(my, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, brother)
                sc(my, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, his)
                sc(my, his) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, camel)
                sc(my, camel) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, uncle)
                sc(my, uncle) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.10) I like the fresh candy better than the stale PHI.
#
################################################################

chaining
    init_table

_______CHAINING_______
!    !        !      !
! I  ! candy  ! PHI  !
! IA ! candyA ! PHIA !
!____!________!______!

    init_table: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, candy)
                sc(PHI, candy) = True
                agr(PHI, candy) = True
                rnr(PHI, candy) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, candy)
                sc(I, candy) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.11) If John can, he will do it.
#
################################################################

chaining
    init_table

____CHAINING___
!       !     !
! John  ! he  !
! JohnA ! heA !
!_______!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

______CHAINING_____
!           !     !
! John      ! he  !
! JohnA     ! heA !
! JohnB^heA !     !
!___________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.12) If he can, John will do it.
#
################################################################

chaining
    init_table

____CHAINING___
!     !       !
! he  ! John  !
! heA ! JohnA !
!_____!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.13) John will do it if he can.
#
################################################################

chaining
    init_table

____CHAINING___
!       !     !
! John  ! he  !
! JohnA ! heA !
!_______!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

______CHAINING_____
!           !     !
! John      ! he  !
! JohnA     ! heA !
! JohnB^heA !     !
!___________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.14) He will do it if John can.
#
################################################################

chaining
    init_table

____CHAINING___
!     !       !
! he  ! John  !
! heA ! JohnA !
!_____!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.24) I have a cat at home, but hate it.
#
################################################################

chaining
    init_table

_____________CHAINING_____________
!    !      !       !      !     !
! I  ! cat  ! home  ! PHI  ! it  !
! IA ! catA ! homeA ! PHIA ! itA !
!____!______!_______!______!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, PHI)
                sc(it, PHI) = True
                agr(it, PHI) = True
                rnr(it, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, home)
                sc(it, home) = True
                agr(it, home) = True
                rnr(it, home) = True
                chaining_e_to_n(itA, home)
                    agr(itA, home) = True
                    new_chain(itA, home)
                        new_chain: create homeB
                        new_chain: create homeB^itA

_______________CHAINING_______________
!    !      !           !      !     !
! I  ! cat  ! home      ! PHI  ! it  !
! IA ! catA ! homeA     ! PHIA ! itA !
!    !      ! homeB^itA !      !     !
!____!______!___________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, cat)
                sc(it, cat) = True
                agr(it, cat) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, I)
                sc(it, I) = True
                agr(it, I) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, it)
                sc(PHI, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, home)
                sc(PHI, home) = True
                agr(PHI, home) = True
                rnr(PHI, home) = True
                chaining_e_to_n(PHIA, home)
                    agr(PHIA, home) = True
                    new_chain(PHIA, home)
                        new_chain: create homeC
                        new_chain: create homeC^PHIA

________________CHAINING_______________
!    !      !            !      !     !
! I  ! cat  ! home       ! PHI  ! it  !
! IA ! catA ! homeA      ! PHIA ! itA !
!    !      ! homeB^itA  !      !     !
!    !      ! homeC^PHIA !      !     !
!____!______!____________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, cat)
                sc(PHI, cat) = True
                agr(PHI, cat) = True
                rnr(PHI, cat) = True
                chaining_e_to_n(PHIA, cat)
                    agr(PHIA, cat) = True
                    new_chain(PHIA, cat)
                        new_chain: create catB
                        new_chain: create catB^PHIA

__________________CHAINING__________________
!    !           !            !      !     !
! I  ! cat       ! home       ! PHI  ! it  !
! IA ! catA      ! homeA      ! PHIA ! itA !
!    ! catB^PHIA ! homeB^itA  !      !     !
!    !           ! homeC^PHIA !      !     !
!____!___________!____________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = True
                chaining_e_to_n(PHIA, I)
                    agr(PHIA, I) = True
                    new_chain(PHIA, I)
                        new_chain: create IB
                        new_chain: create IB^PHIA

_____________________CHAINING____________________
!         !           !            !      !     !
! I       ! cat       ! home       ! PHI  ! it  !
! IA      ! catA      ! homeA      ! PHIA ! itA !
! IB^PHIA ! catB^PHIA ! homeB^itA  !      !     !
!         !           ! homeC^PHIA !      !     !
!_________!___________!____________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, it)
                sc(I, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, home)
                sc(I, home) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, cat)
                sc(I, cat) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.25) I want to get a cat for myself.
#
################################################################

chaining
    init_table

___________CHAINING___________
!    !      !      !         !
! I  ! PHI  ! cat  ! myself  !
! IA ! PHIA ! catA ! myselfA !
!____!______!______!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: cat
            chaining_n_to_n(myself, cat)
                sc(myself, cat) = True
                agr(myself, cat) = False
            chaining_n_to_n: exiting
            simplex_pred(cat)
            simplex_pred: PHI
            chaining_n_to_n(myself, PHI)
                sc(myself, PHI) = True
                agr(myself, PHI) = True
                rnr(myself, PHI) = True
                chaining_e_to_n(myselfA, PHI)
                    agr(myselfA, PHI) = True
                    new_chain(myselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^myselfA

_______________CHAINING_______________
!    !              !      !         !
! I  ! PHI          ! cat  ! myself  !
! IA ! PHIA         ! catA ! myselfA !
!    ! PHIB^myselfA !      !         !
!____!______________!______!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, myself)
                sc(PHI, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, cat)
                sc(PHI, cat) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = True
                chaining_e_to_n(PHIA, I)
                    agr(PHIA, I) = True
                    new_chain(PHIA, I)
                        new_chain: create IB
                        new_chain: create IB^PHIA

__________________CHAINING_________________
!         !              !      !         !
! I       ! PHI          ! cat  ! myself  !
! IA      ! PHIA         ! catA ! myselfA !
! IB^PHIA ! PHIB^myselfA !      !         !
!_________!______________!______!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I)
                    agr(PHIB, I) = True
                    new_chain(PHIB, I)
                        new_chain: create IC
                        new_chain: create IC^PHIB

__________________CHAINING_________________
!         !              !      !         !
! I       ! PHI          ! cat  ! myself  !
! IA      ! PHIA         ! catA ! myselfA !
! IB^PHIA ! PHIB^myselfA !      !         !
! IC^PHIB !              !      !         !
!_________!______________!______!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, myself)
                sc(I, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, cat)
                sc(I, cat) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.27) The men took off their hats.
#
################################################################

chaining
    init_table

_________CHAINING________
!      !        !       !
! men  ! their  ! hats  !
! menA ! theirA ! hatsA !
!______!________!_______!

    init_table: exiting
    chaining_n(their)
        non_refl_chaining(their)
            chaining_n_to_n(their, hats)
                sc(their, hats) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(their, men)
                sc(their, men) = True
                agr(their, men) = True
                rnr(their, men) = True
                chaining_e_to_n(theirA, men)
                    agr(theirA, men) = True
                    new_chain(theirA, men)
                        new_chain: create menB
                        new_chain: create menB^theirA

____________CHAINING____________
!             !        !       !
! men         ! their  ! hats  !
! menA        ! theirA ! hatsA !
! menB^theirA !        !       !
!_____________!________!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.51) The man who lives next door said that he would mow my lawn.
#
################################################################

chaining
    init_table

__________CHAINING__________
!      !     !     !       !
! man  ! he  ! my  ! lawn  !
! manA ! heA ! myA ! lawnA !
!______!_____!_____!_______!

    init_table: exiting
    chaining_n(my)
        non_refl_chaining(my)
            chaining_n_to_n(my, lawn)
                sc(my, lawn) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, he)
                sc(my, he) = True
                agr(my, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, man)
                sc(my, man) = True
                agr(my, man) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, lawn)
                sc(he, lawn) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, my)
                sc(he, my) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, man)
                sc(he, man) = True
                agr(he, man) = True
                rnr(he, man) = True
                chaining_e_to_n(heA, man)
                    agr(heA, man) = True
                    new_chain(heA, man)
                        new_chain: create manB
                        new_chain: create manB^heA

____________CHAINING____________
!          !     !     !       !
! man      ! he  ! my  ! lawn  !
! manA     ! heA ! myA ! lawnA !
! manB^heA !     !     !       !
!__________!_____!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.52) Somebody seduced Bill's sister, but no one will ever seduce Jack’s and she knows it.
#
################################################################

chaining
    init_table

_________________________CHAINING________________________
!           !         !         !         !      !      !
! somebody  ! Bill's  ! sister  ! Jack's  ! PHI  ! she  !
! somebodyA ! Bill'sA ! sisterA ! Jack'sA ! PHIA ! sheA !
!___________!_________!_________!_________!______!______!

    init_table: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, PHI)
                sc(she, PHI) = True
                agr(she, PHI) = True
                rnr(she, PHI) = True
                chaining_e_to_n(sheA, PHI)
                    agr(sheA, PHI) = True
                    new_chain(sheA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^sheA

___________________________CHAINING___________________________
!           !         !         !         !           !      !
! somebody  ! Bill's  ! sister  ! Jack's  ! PHI       ! she  !
! somebodyA ! Bill'sA ! sisterA ! Jack'sA ! PHIA      ! sheA !
!           !         !         !         ! PHIB^sheA !      !
!___________!_________!_________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, Jack's)
                sc(she, Jack's) = True
                agr(she, Jack's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, sister)
                sc(she, sister) = True
                agr(she, sister) = True
                rnr(she, sister) = True
                chaining_e_to_n(sheA, sister)
                    agr(sheA, sister) = True
                    new_chain(sheA, sister)
                        new_chain: create sisterB
                        new_chain: create sisterB^sheA

______________________________CHAINING_____________________________
!           !         !              !         !           !      !
! somebody  ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
!           !         ! sisterB^sheA !         ! PHIB^sheA !      !
!___________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, Bill's)
                sc(she, Bill's) = True
                agr(she, Bill's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, somebody)
                sc(she, somebody) = True
                agr(she, somebody) = True
                rnr(she, somebody) = True
                chaining_e_to_n(sheA, somebody)
                    agr(sheA, somebody) = True
                    new_chain(sheA, somebody)
                        new_chain: create somebodyB
                        new_chain: create somebodyB^sheA

________________________________CHAINING________________________________
!                !         !              !         !           !      !
! somebody       ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA      ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
! somebodyB^sheA !         ! sisterB^sheA !         ! PHIB^sheA !      !
!________________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, she)
                sc(PHI, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Jack's)
                sc(PHI, Jack's) = True
                agr(PHI, Jack's) = True
                rnr(PHI, Jack's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, sister)
                sc(PHI, sister) = True
                agr(PHI, sister) = True
                rnr(PHI, sister) = True
                chaining_e_to_n(PHIA, sister)
                    agr(PHIA, sister) = True
                    new_chain(PHIA, sister)
                        new_chain: create sisterC
                        new_chain: create sisterC^PHIA

________________________________CHAINING________________________________
!                !         !              !         !           !      !
! somebody       ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA      ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
! somebodyB^sheA !         ! sisterB^sheA !         ! PHIB^sheA !      !
!                !         ! sisterC^PHIA !         !           !      !
!________________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, sister)
                    agr(PHIB, sister) = True
                    new_chain(PHIB, sister)
                        new_chain: create sisterD
                        new_chain: create sisterD^PHIB

________________________________CHAINING________________________________
!                !         !              !         !           !      !
! somebody       ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA      ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
! somebodyB^sheA !         ! sisterB^sheA !         ! PHIB^sheA !      !
!                !         ! sisterC^PHIA !         !           !      !
!                !         ! sisterD^PHIB !         !           !      !
!________________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Bill's)
                sc(PHI, Bill's) = True
                agr(PHI, Bill's) = True
                rnr(PHI, Bill's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, somebody)
                sc(PHI, somebody) = True
                agr(PHI, somebody) = True
                rnr(PHI, somebody) = True
                chaining_e_to_n(PHIA, somebody)
                    agr(PHIA, somebody) = True
                    new_chain(PHIA, somebody)
                        new_chain: create somebodyC
                        new_chain: create somebodyC^PHIA

________________________________CHAINING________________________________
!                !         !              !         !           !      !
! somebody       ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA      ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
! somebodyB^sheA !         ! sisterB^sheA !         ! PHIB^sheA !      !
! somebodyC^PHIA !         ! sisterC^PHIA !         !           !      !
!                !         ! sisterD^PHIB !         !           !      !
!________________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, somebody)
                    agr(PHIB, somebody) = True
                    new_chain(PHIB, somebody)
                        new_chain: create somebodyD
                        new_chain: create somebodyD^PHIB

________________________________CHAINING________________________________
!                !         !              !         !           !      !
! somebody       ! Bill's  ! sister       ! Jack's  ! PHI       ! she  !
! somebodyA      ! Bill'sA ! sisterA      ! Jack'sA ! PHIA      ! sheA !
! somebodyB^sheA !         ! sisterB^sheA !         ! PHIB^sheA !      !
! somebodyC^PHIA !         ! sisterC^PHIA !         !           !      !
! somebodyD^PHIB !         ! sisterD^PHIB !         !           !      !
!________________!_________!______________!_________!___________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(somebody)
        non_refl_chaining(somebody)
            chaining_n_to_n(somebody, she)
                sc(somebody, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(somebody, PHI)
                sc(somebody, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(somebody, Jack's)
                sc(somebody, Jack's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(somebody, sister)
                sc(somebody, sister) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(somebody, Bill's)
                sc(somebody, Bill's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.66) Realizing that he was unpopular didn't disturb Oscar.
#
################################################################

chaining
    init_table

________CHAINING_______
!      !     !        !
! PHI  ! he  ! Oscar  !
! PHIA ! heA ! OscarA !
!______!_____!________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Oscar)
                sc(he, Oscar) = True
                agr(he, Oscar) = True
                rnr(he, Oscar) = True
                chaining_e_to_n(heA, Oscar)
                    agr(heA, Oscar) = True
                    new_chain(heA, Oscar)
                        new_chain: create OscarB
                        new_chain: create OscarB^heA

__________CHAINING_________
!      !     !            !
! PHI  ! he  ! Oscar      !
! PHIA ! heA ! OscarA     !
!      !     ! OscarB^heA !
!______!_____!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, PHI)
                sc(he, PHI) = True
                agr(he, PHI) = True
                rnr(he, PHI) = True
                chaining_e_to_n(heA, PHI)
                    agr(heA, PHI) = True
                    new_chain(heA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^heA

____________CHAINING___________
!          !     !            !
! PHI      ! he  ! Oscar      !
! PHIA     ! heA ! OscarA     !
! PHIB^heA !     ! OscarB^heA !
!__________!_____!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, Oscar)
                sc(PHI, Oscar) = True
                agr(PHI, Oscar) = True
                rnr(PHI, Oscar) = True
                chaining_e_to_n(PHIA, Oscar)
                    agr(PHIA, Oscar) = True
                    new_chain(PHIA, Oscar)
                        new_chain: create OscarC
                        new_chain: create OscarC^PHIA

____________CHAINING____________
!          !     !             !
! PHI      ! he  ! Oscar       !
! PHIA     ! heA ! OscarA      !
! PHIB^heA !     ! OscarB^heA  !
!          !     ! OscarC^PHIA !
!__________!_____!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, Oscar)
                    agr(PHIB, Oscar) = True
                    new_chain(PHIB, Oscar)
                        new_chain: create OscarD
                        new_chain: create OscarD^PHIB

____________CHAINING____________
!          !     !             !
! PHI      ! he  ! Oscar       !
! PHIA     ! heA ! OscarA      !
! PHIB^heA !     ! OscarB^heA  !
!          !     ! OscarC^PHIA !
!          !     ! OscarD^PHIB !
!__________!_____!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, he)
                sc(PHI, he) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.70) My neighbor who is pregnant said that she was very happy.
#
################################################################

chaining
    init_table

_________CHAINING_________
!     !           !      !
! my  ! neighbor  ! she  !
! myA ! neighborA ! sheA !
!_____!___________!______!

    init_table: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, neighbor)
                sc(she, neighbor) = True
                agr(she, neighbor) = True
                rnr(she, neighbor) = True
                chaining_e_to_n(sheA, neighbor)
                    agr(sheA, neighbor) = True
                    new_chain(sheA, neighbor)
                        new_chain: create neighborB
                        new_chain: create neighborB^sheA

____________CHAINING___________
!     !                !      !
! my  ! neighbor       ! she  !
! myA ! neighborA      ! sheA !
!     ! neighborB^sheA !      !
!_____!________________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, my)
                sc(she, my) = True
                agr(she, my) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(my)
        non_refl_chaining(my)
            chaining_n_to_n(my, she)
                sc(my, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(my, neighbor)
                sc(my, neighbor) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.74) The pilot who shot at it hit the Mig that chased him.
#
################################################################

chaining
    init_table

___________CHAINING___________
!        !     !      !      !
! pilot  ! it  ! Mig  ! him  !
! pilotA ! itA ! MigA ! himA !
!________!_____!______!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Mig)
                sc(him, Mig) = True
                agr(him, Mig) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, it)
                sc(him, it) = True
                agr(him, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, pilot)
                sc(him, pilot) = True
                agr(him, pilot) = True
                rnr(him, pilot) = True
                chaining_e_to_n(himA, pilot)
                    agr(himA, pilot) = True
                    new_chain(himA, pilot)
                        new_chain: create pilotB
                        new_chain: create pilotB^himA

______________CHAINING_____________
!             !     !      !      !
! pilot       ! it  ! Mig  ! him  !
! pilotA      ! itA ! MigA ! himA !
! pilotB^himA !     !      !      !
!_____________!_____!______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, him)
                sc(it, him) = True
                agr(it, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, Mig)
                sc(it, Mig) = True
                agr(it, Mig) = True
                rnr(it, Mig) = True
                chaining_e_to_n(itA, Mig)
                    agr(itA, Mig) = True
                    new_chain(itA, Mig)
                        new_chain: create MigB
                        new_chain: create MigB^itA

________________CHAINING_______________
!             !     !          !      !
! pilot       ! it  ! Mig      ! him  !
! pilotA      ! itA ! MigA     ! himA !
! pilotB^himA !     ! MigB^itA !      !
!_____________!_____!__________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, pilot)
                sc(it, pilot) = True
                agr(it, pilot) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.86) The mosquito which bit Algernon was killed by him.
#
################################################################

chaining
    init_table

____________CHAINING____________
!           !           !      !
! mosquito  ! Algernon  ! him  !
! mosquitoA ! AlgernonA ! himA !
!___________!___________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Algernon)
                sc(him, Algernon) = True
                agr(him, Algernon) = True
                rnr(him, Algernon) = True
                chaining_e_to_n(himA, Algernon)
                    agr(himA, Algernon) = True
                    new_chain(himA, Algernon)
                        new_chain: create AlgernonB
                        new_chain: create AlgernonB^himA

_______________CHAINING______________
!           !                !      !
! mosquito  ! Algernon       ! him  !
! mosquitoA ! AlgernonA      ! himA !
!           ! AlgernonB^himA !      !
!___________!________________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, mosquito)
                sc(him, mosquito) = True
                agr(him, mosquito) = True
                rnr(him, mosquito) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.87) The mosquito which bit him was killed by Algernon.
#
################################################################

chaining
    init_table

____________CHAINING____________
!           !      !           !
! mosquito  ! him  ! Algernon  !
! mosquitoA ! himA ! AlgernonA !
!___________!______!___________!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Algernon)
                sc(him, Algernon) = True
                agr(him, Algernon) = True
                rnr(him, Algernon) = True
                chaining_e_to_n(himA, Algernon)
                    agr(himA, Algernon) = True
                    new_chain(himA, Algernon)
                        new_chain: create AlgernonB
                        new_chain: create AlgernonB^himA

_______________CHAINING______________
!           !      !                !
! mosquito  ! him  ! Algernon       !
! mosquitoA ! himA ! AlgernonA      !
!           !      ! AlgernonB^himA !
!___________!______!________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, mosquito)
                sc(him, mosquito) = True
                agr(him, mosquito) = True
                rnr(him, mosquito) = True
                chaining_e_to_n(himA, mosquito)
                    agr(himA, mosquito) = True
                    new_chain(himA, mosquito)
                        new_chain: create mosquitoB
                        new_chain: create mosquitoB^himA

_________________CHAINING_________________
!                !      !                !
! mosquito       ! him  ! Algernon       !
! mosquitoA      ! himA ! AlgernonA      !
! mosquitoB^himA !      ! AlgernonB^himA !
!________________!______!________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.88) Algernon killed the mosquito which bit him.
#
################################################################

chaining
    init_table

____________CHAINING____________
!           !           !      !
! Algernon  ! mosquito  ! him  !
! AlgernonA ! mosquitoA ! himA !
!___________!___________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, mosquito)
                sc(him, mosquito) = True
                agr(him, mosquito) = True
                rnr(him, mosquito) = True
                chaining_e_to_n(himA, mosquito)
                    agr(himA, mosquito) = True
                    new_chain(himA, mosquito)
                        new_chain: create mosquitoB
                        new_chain: create mosquitoB^himA

_______________CHAINING______________
!           !                !      !
! Algernon  ! mosquito       ! him  !
! AlgernonA ! mosquitoA      ! himA !
!           ! mosquitoB^himA !      !
!___________!________________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Algernon)
                sc(him, Algernon) = True
                agr(him, Algernon) = True
                rnr(him, Algernon) = True
                chaining_e_to_n(himA, Algernon)
                    agr(himA, Algernon) = True
                    new_chain(himA, Algernon)
                        new_chain: create AlgernonB
                        new_chain: create AlgernonB^himA

_________________CHAINING_________________
!                !                !      !
! Algernon       ! mosquito       ! him  !
! AlgernonA      ! mosquitoA      ! himA !
! AlgernonB^himA ! mosquitoB^himA !      !
!________________!________________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.89) He killed the mosquito which bit Algernon.
#
################################################################

chaining
    init_table

____________CHAINING___________
!     !           !           !
! he  ! mosquito  ! Algernon  !
! heA ! mosquitoA ! AlgernonA !
!_____!___________!___________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Algernon)
                sc(he, Algernon) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, mosquito)
                sc(he, mosquito) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.91) After John Adams woke up, he was hungry.
#
################################################################

chaining
    init_table

____CHAINING___
!       !     !
! John  ! he  !
! JohnA ! heA !
!_______!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

______CHAINING_____
!           !     !
! John      ! he  !
! JohnA     ! heA !
! JohnB^heA !     !
!___________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.92) That Oscar was unpopular didn't disturb him.
#
################################################################

chaining
    init_table

_____CHAINING____
!        !      !
! Oscar  ! him  !
! OscarA ! himA !
!________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Oscar)
                sc(him, Oscar) = True
                agr(him, Oscar) = True
                rnr(him, Oscar) = True
                chaining_e_to_n(himA, Oscar)
                    agr(himA, Oscar) = True
                    new_chain(himA, Oscar)
                        new_chain: create OscarB
                        new_chain: create OscarB^himA

_______CHAINING_______
!             !      !
! Oscar       ! him  !
! OscarA      ! himA !
! OscarB^himA !      !
!_____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.93) For your brother to refuse to pay taxes would get him into trouble.
#
################################################################

chaining
    init_table

___________________CHAINING__________________
!       !          !      !      !          !
! your  ! brother  ! PHI  ! him  ! trouble  !
! yourA ! brotherA ! PHIA ! himA ! troubleA !
!_______!__________!______!______!__________!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, trouble)
                sc(him, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = True
                agr(him, PHI) = True
                rnr(him, PHI) = True
                chaining_e_to_n(himA, PHI)
                    agr(himA, PHI) = True
                    new_chain(himA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himA

_____________________CHAINING_____________________
!       !          !           !      !          !
! your  ! brother  ! PHI       ! him  ! trouble  !
! yourA ! brotherA ! PHIA      ! himA ! troubleA !
!       !          ! PHIB^himA !      !          !
!_______!__________!___________!______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, brother)
                sc(him, brother) = True
                agr(him, brother) = True
                rnr(him, brother) = True
                chaining_e_to_n(himA, brother)
                    agr(himA, brother) = True
                    new_chain(himA, brother)
                        new_chain: create brotherB
                        new_chain: create brotherB^himA

________________________CHAINING_______________________
!       !               !           !      !          !
! your  ! brother       ! PHI       ! him  ! trouble  !
! yourA ! brotherA      ! PHIA      ! himA ! troubleA !
!       ! brotherB^himA ! PHIB^himA !      !          !
!_______!_______________!___________!______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, your)
                sc(him, your) = True
                agr(him, your) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, trouble)
                sc(PHI, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, brother)
                sc(PHI, brother) = True
                agr(PHI, brother) = True
                rnr(PHI, brother) = True
                chaining_e_to_n(PHIA, brother)
                    agr(PHIA, brother) = True
                    new_chain(PHIA, brother)
                        new_chain: create brotherC
                        new_chain: create brotherC^PHIA

________________________CHAINING_______________________
!       !               !           !      !          !
! your  ! brother       ! PHI       ! him  ! trouble  !
! yourA ! brotherA      ! PHIA      ! himA ! troubleA !
!       ! brotherB^himA ! PHIB^himA !      !          !
!       ! brotherC^PHIA !           !      !          !
!_______!_______________!___________!______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, brother)
                    agr(PHIB, brother) = True
                    new_chain(PHIB, brother)
                        new_chain: create brotherD
                        new_chain: create brotherD^PHIB

________________________CHAINING_______________________
!       !               !           !      !          !
! your  ! brother       ! PHI       ! him  ! trouble  !
! yourA ! brotherA      ! PHIA      ! himA ! troubleA !
!       ! brotherB^himA ! PHIB^himA !      !          !
!       ! brotherC^PHIA !           !      !          !
!       ! brotherD^PHIB !           !      !          !
!_______!_______________!___________!______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, your)
                sc(PHI, your) = True
                agr(PHI, your) = True
                rnr(PHI, your) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(your)
        non_refl_chaining(your)
            chaining_n_to_n(your, trouble)
                sc(your, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, him)
                sc(your, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, PHI)
                sc(your, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, brother)
                sc(your, brother) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.94) Anna's complaining about Peter infuriated him.
#
################################################################

chaining
    init_table

_________________CHAINING_________________
!         !              !        !      !
! Anna's  ! complaining  ! Peter  ! him  !
! Anna'sA ! complainingA ! PeterA ! himA !
!_________!______________!________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Peter)
                sc(him, Peter) = True
                agr(him, Peter) = True
                rnr(him, Peter) = True
                chaining_e_to_n(himA, Peter)
                    agr(himA, Peter) = True
                    new_chain(himA, Peter)
                        new_chain: create PeterB
                        new_chain: create PeterB^himA

____________________CHAINING___________________
!         !              !             !      !
! Anna's  ! complaining  ! Peter       ! him  !
! Anna'sA ! complainingA ! PeterA      ! himA !
!         !              ! PeterB^himA !      !
!_________!______________!_____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, complaining)
                sc(him, complaining) = True
                agr(him, complaining) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Anna's)
                sc(him, Anna's) = True
                agr(him, Anna's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.95) The possibility that Fred will be unpopular doesn’t bother him.
#
################################################################

chaining
    init_table

____________CHAINING___________
!              !       !      !
! possibility  ! Fred  ! him  !
! possibilityA ! FredA ! himA !
!______________!_______!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Fred)
                sc(him, Fred) = True
                agr(him, Fred) = True
                rnr(him, Fred) = True
                chaining_e_to_n(himA, Fred)
                    agr(himA, Fred) = True
                    new_chain(himA, Fred)
                        new_chain: create FredB
                        new_chain: create FredB^himA

______________CHAINING______________
!              !            !      !
! possibility  ! Fred       ! him  !
! possibilityA ! FredA      ! himA !
!              ! FredB^himA !      !
!______________!____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, possibility)
                sc(him, possibility) = True
                agr(him, possibility) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.96) After he woke up, John Adams was hungry.
#
################################################################

chaining
    init_table

____CHAINING___
!     !       !
! he  ! John  !
! heA ! JohnA !
!_____!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.97) That he was unpopular didn't disturb Oscar.
#
################################################################

chaining
    init_table

____CHAINING____
!     !        !
! he  ! Oscar  !
! heA ! OscarA !
!_____!________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Oscar)
                sc(he, Oscar) = True
                agr(he, Oscar) = True
                rnr(he, Oscar) = True
                chaining_e_to_n(heA, Oscar)
                    agr(heA, Oscar) = True
                    new_chain(heA, Oscar)
                        new_chain: create OscarB
                        new_chain: create OscarB^heA

______CHAINING______
!     !            !
! he  ! Oscar      !
! heA ! OscarA     !
!     ! OscarB^heA !
!_____!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.98) For him to refuse to pay taxes would get your brother into trouble.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!      !      !        !       !          !          !
! him  ! PHI  ! taxes  ! your  ! brother  ! trouble  !
! himA ! PHIA ! taxesA ! yourA ! brotherA ! troubleA !
!______!______!________!_______!__________!__________!

    init_table: exiting
    chaining_n(your)
        non_refl_chaining(your)
            chaining_n_to_n(your, trouble)
                sc(your, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, brother)
                sc(your, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, taxes)
                sc(your, taxes) = True
                agr(your, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, PHI)
                sc(your, PHI) = True
                agr(your, PHI) = True
                rnr(your, PHI) = True
                chaining_e_to_n(yourA, PHI)
                    agr(yourA, PHI) = True
                    new_chain(yourA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^yourA

__________________________CHAINING__________________________
!      !            !        !       !          !          !
! him  ! PHI        ! taxes  ! your  ! brother  ! trouble  !
! himA ! PHIA       ! taxesA ! yourA ! brotherA ! troubleA !
!      ! PHIB^yourA !        !       !          !          !
!______!____________!________!_______!__________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(your, him)
                sc(your, him) = True
                agr(your, him) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, trouble)
                sc(PHI, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, brother)
                sc(PHI, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, your)
                sc(PHI, your) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, taxes)
                sc(PHI, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = True
                agr(PHI, him) = True
                rnr(PHI, him) = True
                chaining_e_to_n(PHIA, him)
                    agr(PHIA, him) = True
                    new_chain(PHIA, him)
                        new_chain: create himB
                        new_chain: create himB^PHIA

_____________________________CHAINING____________________________
!           !            !        !       !          !          !
! him       ! PHI        ! taxes  ! your  ! brother  ! trouble  !
! himA      ! PHIA       ! taxesA ! yourA ! brotherA ! troubleA !
! himB^PHIA ! PHIB^yourA !        !       !          !          !
!___________!____________!________!_______!__________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, him)
                    agr(PHIB, him) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, trouble)
                sc(him, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, brother)
                sc(him, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, your)
                sc(him, your) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, taxes)
                sc(him, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.99) Anna's complaining about him infuriated Peter.
#
################################################################

chaining
    init_table

_________________CHAINING_________________
!         !              !      !        !
! Anna's  ! complaining  ! him  ! Peter  !
! Anna'sA ! complainingA ! himA ! PeterA !
!_________!______________!______!________!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Peter)
                sc(him, Peter) = True
                agr(him, Peter) = True
                rnr(him, Peter) = True
                chaining_e_to_n(himA, Peter)
                    agr(himA, Peter) = True
                    new_chain(himA, Peter)
                        new_chain: create PeterB
                        new_chain: create PeterB^himA

____________________CHAINING___________________
!         !              !      !             !
! Anna's  ! complaining  ! him  ! Peter       !
! Anna'sA ! complainingA ! himA ! PeterA      !
!         !              !      ! PeterB^himA !
!_________!______________!______!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, complaining)
                sc(him, complaining) = True
                agr(him, complaining) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Anna's)
                sc(him, Anna's) = True
                agr(him, Anna's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.100) The possibility that he will be unpopular doesn’t bother Fred.
#
################################################################

chaining
    init_table

___________CHAINING___________
!              !     !       !
! possibility  ! he  ! Fred  !
! possibilityA ! heA ! FredA !
!______________!_____!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Fred)
                sc(he, Fred) = True
                agr(he, Fred) = True
                rnr(he, Fred) = True
                chaining_e_to_n(heA, Fred)
                    agr(heA, Fred) = True
                    new_chain(heA, Fred)
                        new_chain: create FredB
                        new_chain: create FredB^heA

_____________CHAINING_____________
!              !     !           !
! possibility  ! he  ! Fred      !
! possibilityA ! heA ! FredA     !
!              !     ! FredB^heA !
!______________!_____!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, possibility)
                sc(he, possibility) = True
                agr(he, possibility) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.101) John Adams was hungry after he woke up.
#
################################################################

chaining
    init_table

____CHAINING___
!       !     !
! John  ! he  !
! JohnA ! heA !
!_______!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

______CHAINING_____
!           !     !
! John      ! he  !
! JohnA     ! heA !
! JohnB^heA !     !
!___________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.102) Oscar wasn't disturbed that he was unpopular.
#
################################################################

chaining
    init_table

____CHAINING____
!        !     !
! Oscar  ! he  !
! OscarA ! heA !
!________!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Oscar)
                sc(he, Oscar) = True
                agr(he, Oscar) = True
                rnr(he, Oscar) = True
                chaining_e_to_n(heA, Oscar)
                    agr(heA, Oscar) = True
                    new_chain(heA, Oscar)
                        new_chain: create OscarB
                        new_chain: create OscarB^heA

______CHAINING______
!            !     !
! Oscar      ! he  !
! OscarA     ! heA !
! OscarB^heA !     !
!____________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.103) It would get your brother into trouble for him to refuse to pay taxes.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!       !          !          !      !      !        !
! your  ! brother  ! trouble  ! him  ! PHI  ! taxes  !
! yourA ! brotherA ! troubleA ! himA ! PHIA ! taxesA !
!_______!__________!__________!______!______!________!

    init_table: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, taxes)
                sc(PHI, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = True
                agr(PHI, him) = True
                rnr(PHI, him) = True
                chaining_e_to_n(PHIA, him)
                    agr(PHIA, him) = True
                    new_chain(PHIA, him)
                        new_chain: create himB
                        new_chain: create himB^PHIA

__________________________CHAINING_________________________
!       !          !          !           !      !        !
! your  ! brother  ! trouble  ! him       ! PHI  ! taxes  !
! yourA ! brotherA ! troubleA ! himA      ! PHIA ! taxesA !
!       !          !          ! himB^PHIA !      !        !
!_______!__________!__________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, trouble)
                sc(PHI, trouble) = True
                agr(PHI, trouble) = True
                rnr(PHI, trouble) = True
                chaining_e_to_n(PHIA, trouble)
                    agr(PHIA, trouble) = True
                    new_chain(PHIA, trouble)
                        new_chain: create troubleB
                        new_chain: create troubleB^PHIA

____________________________CHAINING____________________________
!       !          !               !           !      !        !
! your  ! brother  ! trouble       ! him       ! PHI  ! taxes  !
! yourA ! brotherA ! troubleA      ! himA      ! PHIA ! taxesA !
!       !          ! troubleB^PHIA ! himB^PHIA !      !        !
!_______!__________!_______________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, brother)
                sc(PHI, brother) = True
                agr(PHI, brother) = True
                rnr(PHI, brother) = True
                chaining_e_to_n(PHIA, brother)
                    agr(PHIA, brother) = True
                    new_chain(PHIA, brother)
                        new_chain: create brotherB
                        new_chain: create brotherB^PHIA

_______________________________CHAINING______________________________
!       !               !               !           !      !        !
! your  ! brother       ! trouble       ! him       ! PHI  ! taxes  !
! yourA ! brotherA      ! troubleA      ! himA      ! PHIA ! taxesA !
!       ! brotherB^PHIA ! troubleB^PHIA ! himB^PHIA !      !        !
!_______!_______________!_______________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, your)
                sc(PHI, your) = True
                agr(PHI, your) = True
                rnr(PHI, your) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, taxes)
                sc(him, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, trouble)
                sc(him, trouble) = True
                agr(him, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, brother)
                sc(him, brother) = True
                agr(him, brother) = True
                rnr(him, brother) = True
                chaining_e_to_n(himA, brother)
                    agr(himA, brother) = True
                    new_chain(himA, brother)
                        new_chain: create brotherC
                        new_chain: create brotherC^himA

_______________________________CHAINING______________________________
!       !               !               !           !      !        !
! your  ! brother       ! trouble       ! him       ! PHI  ! taxes  !
! yourA ! brotherA      ! troubleA      ! himA      ! PHIA ! taxesA !
!       ! brotherB^PHIA ! troubleB^PHIA ! himB^PHIA !      !        !
!       ! brotherC^himA !               !           !      !        !
!_______!_______________!_______________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(himB, brother)
                    agr(himB, brother) = True
                    new_chain(himB, brother)
                        new_chain: create brotherD
                        new_chain: create brotherD^himB

_______________________________CHAINING______________________________
!       !               !               !           !      !        !
! your  ! brother       ! trouble       ! him       ! PHI  ! taxes  !
! yourA ! brotherA      ! troubleA      ! himA      ! PHIA ! taxesA !
!       ! brotherB^PHIA ! troubleB^PHIA ! himB^PHIA !      !        !
!       ! brotherC^himA !               !           !      !        !
!       ! brotherD^himB !               !           !      !        !
!_______!_______________!_______________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, your)
                sc(him, your) = True
                agr(him, your) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(your)
        non_refl_chaining(your)
            chaining_n_to_n(your, taxes)
                sc(your, taxes) = True
                agr(your, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, PHI)
                sc(your, PHI) = True
                agr(your, PHI) = True
                rnr(your, PHI) = True
                chaining_e_to_n(yourA, PHI)
                    agr(yourA, PHI) = True
                    new_chain(yourA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^yourA

__________________________________CHAINING_________________________________
!       !               !               !           !            !        !
! your  ! brother       ! trouble       ! him       ! PHI        ! taxes  !
! yourA ! brotherA      ! troubleA      ! himA      ! PHIA       ! taxesA !
!       ! brotherB^PHIA ! troubleB^PHIA ! himB^PHIA ! PHIB^yourA !        !
!       ! brotherC^himA !               !           !            !        !
!       ! brotherD^himB !               !           !            !        !
!_______!_______________!_______________!___________!____________!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(your, him)
                sc(your, him) = True
                agr(your, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, trouble)
                sc(your, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, brother)
                sc(your, brother) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.104) Peter was infuriated at Anna's complaining about him.
#
################################################################

chaining
    init_table

_________________CHAINING_________________
!        !         !              !      !
! Peter  ! Anna's  ! complaining  ! him  !
! PeterA ! Anna'sA ! complainingA ! himA !
!________!_________!______________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, complaining)
                sc(him, complaining) = True
                agr(him, complaining) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Anna's)
                sc(him, Anna's) = True
                agr(him, Anna's) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Peter)
                sc(him, Peter) = True
                agr(him, Peter) = True
                rnr(him, Peter) = True
                chaining_e_to_n(himA, Peter)
                    agr(himA, Peter) = True
                    new_chain(himA, Peter)
                        new_chain: create PeterB
                        new_chain: create PeterB^himA

____________________CHAINING___________________
!             !         !              !      !
! Peter       ! Anna's  ! complaining  ! him  !
! PeterA      ! Anna'sA ! complainingA ! himA !
! PeterB^himA !         !              !      !
!_____________!_________!______________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.105) Fred isn't bothered by the possibility that he will be unpopular.
#
################################################################

chaining
    init_table

___________CHAINING___________
!       !              !     !
! Fred  ! possibility  ! he  !
! FredA ! possibilityA ! heA !
!_______!______________!_____!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, possibility)
                sc(he, possibility) = True
                agr(he, possibility) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Fred)
                sc(he, Fred) = True
                agr(he, Fred) = True
                rnr(he, Fred) = True
                chaining_e_to_n(heA, Fred)
                    agr(heA, Fred) = True
                    new_chain(heA, Fred)
                        new_chain: create FredB
                        new_chain: create FredB^heA

_____________CHAINING_____________
!           !              !     !
! Fred      ! possibility  ! he  !
! FredA     ! possibilityA ! heA !
! FredB^heA !              !     !
!___________!______________!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.106) *He was hungry after John Adams woke up.
#
################################################################

chaining
    init_table

____CHAINING___
!     !       !
! he  ! John  !
! heA ! JohnA !
!_____!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, John)
                sc(he, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.107) *He wasn't disturbed that Oscar was unpopular.
#
################################################################

chaining
    init_table

____CHAINING____
!     !        !
! he  ! Oscar  !
! heA ! OscarA !
!_____!________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Oscar)
                sc(he, Oscar) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.108) *It would get him into trouble for your brother to refuse to pay taxes.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!      !          !       !          !      !        !
! him  ! trouble  ! your  ! brother  ! PHI  ! taxes  !
! himA ! troubleA ! yourA ! brotherA ! PHIA ! taxesA !
!______!__________!_______!__________!______!________!

    init_table: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, taxes)
                sc(PHI, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, brother)
                sc(PHI, brother) = True
                agr(PHI, brother) = True
                rnr(PHI, brother) = True
                chaining_e_to_n(PHIA, brother)
                    agr(PHIA, brother) = True
                    new_chain(PHIA, brother)
                        new_chain: create brotherB
                        new_chain: create brotherB^PHIA

__________________________CHAINING_________________________
!      !          !       !               !      !        !
! him  ! trouble  ! your  ! brother       ! PHI  ! taxes  !
! himA ! troubleA ! yourA ! brotherA      ! PHIA ! taxesA !
!      !          !       ! brotherB^PHIA !      !        !
!______!__________!_______!_______________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, your)
                sc(PHI, your) = True
                agr(PHI, your) = True
                rnr(PHI, your) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, trouble)
                sc(PHI, trouble) = True
                agr(PHI, trouble) = True
                rnr(PHI, trouble) = True
                chaining_e_to_n(PHIA, trouble)
                    agr(PHIA, trouble) = True
                    new_chain(PHIA, trouble)
                        new_chain: create troubleB
                        new_chain: create troubleB^PHIA

____________________________CHAINING____________________________
!      !               !       !               !      !        !
! him  ! trouble       ! your  ! brother       ! PHI  ! taxes  !
! himA ! troubleA      ! yourA ! brotherA      ! PHIA ! taxesA !
!      ! troubleB^PHIA !       ! brotherB^PHIA !      !        !
!______!_______________!_______!_______________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = True
                agr(PHI, him) = True
                rnr(PHI, him) = True
                chaining_e_to_n(PHIA, him)
                    agr(PHIA, him) = True
                    new_chain(PHIA, him)
                        new_chain: create himB
                        new_chain: create himB^PHIA

_______________________________CHAINING______________________________
!           !               !       !               !      !        !
! him       ! trouble       ! your  ! brother       ! PHI  ! taxes  !
! himA      ! troubleA      ! yourA ! brotherA      ! PHIA ! taxesA !
! himB^PHIA ! troubleB^PHIA !       ! brotherB^PHIA !      !        !
!___________!_______________!_______!_______________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(your)
        non_refl_chaining(your)
            chaining_n_to_n(your, taxes)
                sc(your, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, PHI)
                sc(your, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, brother)
                sc(your, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, trouble)
                sc(your, trouble) = True
                agr(your, trouble) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(your, him)
                sc(your, him) = True
                agr(your, him) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, taxes)
                sc(him, taxes) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, brother)
                sc(him, brother) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, your)
                sc(him, your) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, trouble)
                sc(him, trouble) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.109) *He was infuriated at Anna's complaining about Peter.
#
################################################################

chaining
    init_table

_________________CHAINING________________
!     !         !              !        !
! he  ! Anna's  ! complaining  ! Peter  !
! heA ! Anna'sA ! complainingA ! PeterA !
!_____!_________!______________!________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Peter)
                sc(he, Peter) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, complaining)
                sc(he, complaining) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Anna's)
                sc(he, Anna's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.110) *He isn't bothered by the possibility that Fred will be unpopular.
#
################################################################

chaining
    init_table

___________CHAINING___________
!     !              !       !
! he  ! possibility  ! Fred  !
! heA ! possibilityA ! FredA !
!_____!______________!_______!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, Fred)
                sc(he, Fred) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, possibility)
                sc(he, possibility) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.111) Penelope cursed Peter and slandered him.
#
################################################################

chaining
    init_table

______________CHAINING______________
!           !        !      !      !
! Penelope  ! Peter  ! PHI  ! him  !
! PenelopeA ! PeterA ! PHIA ! himA !
!___________!________!______!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = True
                agr(him, PHI) = True
                rnr(him, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Peter)
                sc(him, Peter) = True
                agr(him, Peter) = True
                rnr(him, Peter) = True
                chaining_e_to_n(himA, Peter)
                    agr(himA, Peter) = True
                    new_chain(himA, Peter)
                        new_chain: create PeterB
                        new_chain: create PeterB^himA

_________________CHAINING________________
!           !             !      !      !
! Penelope  ! Peter       ! PHI  ! him  !
! PenelopeA ! PeterA      ! PHIA ! himA !
!           ! PeterB^himA !      !      !
!___________!_____________!______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Penelope)
                sc(him, Penelope) = True
                agr(him, Penelope) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Peter)
                sc(PHI, Peter) = True
                agr(PHI, Peter) = True
                rnr(PHI, Peter) = True
                chaining_e_to_n(PHIA, Peter)
                    agr(PHIA, Peter) = True
                    new_chain(PHIA, Peter)
                        new_chain: create PeterC
                        new_chain: create PeterC^PHIA

_________________CHAINING________________
!           !             !      !      !
! Penelope  ! Peter       ! PHI  ! him  !
! PenelopeA ! PeterA      ! PHIA ! himA !
!           ! PeterB^himA !      !      !
!           ! PeterC^PHIA !      !      !
!___________!_____________!______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Penelope)
                sc(PHI, Penelope) = True
                agr(PHI, Penelope) = True
                rnr(PHI, Penelope) = True
                chaining_e_to_n(PHIA, Penelope)
                    agr(PHIA, Penelope) = True
                    new_chain(PHIA, Penelope)
                        new_chain: create PenelopeB
                        new_chain: create PenelopeB^PHIA

___________________CHAINING___________________
!                !             !      !      !
! Penelope       ! Peter       ! PHI  ! him  !
! PenelopeA      ! PeterA      ! PHIA ! himA !
! PenelopeB^PHIA ! PeterB^himA !      !      !
!                ! PeterC^PHIA !      !      !
!________________!_____________!______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.112) *Penelope cursed him and slandered Peter.
#
################################################################

chaining
    init_table

______________CHAINING______________
!           !      !      !        !
! Penelope  ! him  ! PHI  ! Peter  !
! PenelopeA ! himA ! PHIA ! PeterA !
!___________!______!______!________!

    init_table: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, Peter)
                sc(PHI, Peter) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, him)
                sc(PHI, him) = True
                agr(PHI, him) = True
                rnr(PHI, him) = True
                chaining_e_to_n(PHIA, him)
                    agr(PHIA, him) = True
                    new_chain(PHIA, him)
                        new_chain: create himB
                        new_chain: create himB^PHIA

_________________CHAINING________________
!           !           !      !        !
! Penelope  ! him       ! PHI  ! Peter  !
! PenelopeA ! himA      ! PHIA ! PeterA !
!           ! himB^PHIA !      !        !
!___________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Penelope)
                sc(PHI, Penelope) = True
                agr(PHI, Penelope) = True
                rnr(PHI, Penelope) = True
                chaining_e_to_n(PHIA, Penelope)
                    agr(PHIA, Penelope) = True
                    new_chain(PHIA, Penelope)
                        new_chain: create PenelopeB
                        new_chain: create PenelopeB^PHIA

___________________CHAINING___________________
!                !           !      !        !
! Penelope       ! him       ! PHI  ! Peter  !
! PenelopeA      ! himA      ! PHIA ! PeterA !
! PenelopeB^PHIA ! himB^PHIA !      !        !
!________________!___________!______!________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Peter)
                sc(him, Peter) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, PHI)
                sc(him, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Penelope)
                sc(him, Penelope) = True
                agr(him, Penelope) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (1.113) The interest in visiting Las Vegas that Mary displayed is typical of gamblers.
#
################################################################

chaining
    init_table

___________________________CHAINING___________________________
!           !       !            !       !       !           !
! interest  ! PHI1  ! Las Vegas  ! Mary  ! PHI2  ! gamblers  !
! interestA ! PHI1A ! Las VegasA ! MaryA ! PHI2A ! gamblersA !
!___________!_______!____________!_______!_______!___________!

    init_table: exiting
    chaining_n(PHI2)
        non_refl_chaining(PHI2)
            chaining_n_to_n(PHI2, gamblers)
                sc(PHI2, gamblers) = True
                agr(PHI2, gamblers) = True
                rnr(PHI2, gamblers) = True
                chaining_e_to_n(PHI2A, gamblers)
                    agr(PHI2A, gamblers) = True
                    new_chain(PHI2A, gamblers)
                        new_chain: create gamblersB
                        new_chain: create gamblersB^PHI2A

______________________________CHAINING______________________________
!           !       !            !       !       !                 !
! interest  ! PHI1  ! Las Vegas  ! Mary  ! PHI2  ! gamblers        !
! interestA ! PHI1A ! Las VegasA ! MaryA ! PHI2A ! gamblersA       !
!           !       !            !       !       ! gamblersB^PHI2A !
!___________!_______!____________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, Mary)
                sc(PHI2, Mary) = True
                agr(PHI2, Mary) = True
                rnr(PHI2, Mary) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, Las Vegas)
                sc(PHI2, Las Vegas) = True
                agr(PHI2, Las Vegas) = True
                rnr(PHI2, Las Vegas) = True
                chaining_e_to_n(PHI2A, Las Vegas)
                    agr(PHI2A, Las Vegas) = True
                    new_chain(PHI2A, Las Vegas)
                        new_chain: create Las VegasB
                        new_chain: create Las VegasB^PHI2A

_________________________________CHAINING_________________________________
!           !       !                  !       !       !                 !
! interest  ! PHI1  ! Las Vegas        ! Mary  ! PHI2  ! gamblers        !
! interestA ! PHI1A ! Las VegasA       ! MaryA ! PHI2A ! gamblersA       !
!           !       ! Las VegasB^PHI2A !       !       ! gamblersB^PHI2A !
!___________!_______!__________________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, PHI1)
                sc(PHI2, PHI1) = True
                agr(PHI2, PHI1) = True
                rnr(PHI2, PHI1) = True
                chaining_e_to_n(PHI2A, PHI1)
                    agr(PHI2A, PHI1) = True
                    new_chain(PHI2A, PHI1)
                        new_chain: create PHI1B
                        new_chain: create PHI1B^PHI2A

____________________________________CHAINING____________________________________
!           !             !                  !       !       !                 !
! interest  ! PHI1        ! Las Vegas        ! Mary  ! PHI2  ! gamblers        !
! interestA ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A ! gamblersA       !
!           ! PHI1B^PHI2A ! Las VegasB^PHI2A !       !       ! gamblersB^PHI2A !
!___________!_____________!__________________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, interest)
                sc(PHI2, interest) = True
                agr(PHI2, interest) = True
                rnr(PHI2, interest) = True
                chaining_e_to_n(PHI2A, interest)
                    agr(PHI2A, interest) = True
                    new_chain(PHI2A, interest)
                        new_chain: create interestB
                        new_chain: create interestB^PHI2A

_______________________________________CHAINING_______________________________________
!                 !             !                  !       !       !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary  ! PHI2  ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A !       !       ! gamblersB^PHI2A !
!_________________!_____________!__________________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI1)
        non_refl_chaining(PHI1)
            chaining_n_to_n(PHI1, gamblers)
                sc(PHI1, gamblers) = True
                agr(PHI1, gamblers) = True
                rnr(PHI1, gamblers) = True
                chaining_e_to_n(PHI1A, gamblers)
                    agr(PHI1A, gamblers) = True
                    new_chain(PHI1A, gamblers)
                        new_chain: create gamblersC
                        new_chain: create gamblersC^PHI1A

_______________________________________CHAINING_______________________________________
!                 !             !                  !       !       !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary  ! PHI2  ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A !       !       ! gamblersB^PHI2A !
!                 !             !                  !       !       ! gamblersC^PHI1A !
!_________________!_____________!__________________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1B, gamblers)
                    agr(PHI1B, gamblers) = True
                    new_chain(PHI1B, gamblers)
                        new_chain: create gamblersD
                        new_chain: create gamblersD^PHI1B

_______________________________________CHAINING_______________________________________
!                 !             !                  !       !       !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary  ! PHI2  ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A !       !       ! gamblersB^PHI2A !
!                 !             !                  !       !       ! gamblersC^PHI1A !
!                 !             !                  !       !       ! gamblersD^PHI1B !
!_________________!_____________!__________________!_______!_______!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, PHI2)
                sc(PHI1, PHI2) = True
                agr(PHI1, PHI2) = True
                rnr(PHI1, PHI2) = True
                chaining_e_to_n(PHI1A, PHI2)
                    agr(PHI1A, PHI2) = True
                    new_chain(PHI1A, PHI2)
                        new_chain: create PHI2B
                        new_chain: create PHI2B^PHI1A

__________________________________________CHAINING__________________________________________
!                 !             !                  !       !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary  ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A !       ! PHI2B^PHI1A ! gamblersB^PHI2A !
!                 !             !                  !       !             ! gamblersC^PHI1A !
!                 !             !                  !       !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_______!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1B, PHI2)
                    agr(PHI1B, PHI2) = True
                    new_chain(PHI1B, PHI2)
                        new_chain: create PHI2C
                        new_chain: create PHI2C^PHI1B

__________________________________________CHAINING__________________________________________
!                 !             !                  !       !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary  ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A !       ! PHI2B^PHI1A ! gamblersB^PHI2A !
!                 !             !                  !       ! PHI2C^PHI1B ! gamblersC^PHI1A !
!                 !             !                  !       !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_______!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, Mary)
                sc(PHI1, Mary) = True
                agr(PHI1, Mary) = True
                rnr(PHI1, Mary) = True
                chaining_e_to_n(PHI1A, Mary)
                    agr(PHI1A, Mary) = True
                    new_chain(PHI1A, Mary)
                        new_chain: create MaryB
                        new_chain: create MaryB^PHI1A

_____________________________________________CHAINING_____________________________________________
!                 !             !                  !             !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary        ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA       ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A ! MaryB^PHI1A ! PHI2B^PHI1A ! gamblersB^PHI2A !
!                 !             !                  !             ! PHI2C^PHI1B ! gamblersC^PHI1A !
!                 !             !                  !             !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_____________!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1B, Mary)
                    agr(PHI1B, Mary) = True
                    new_chain(PHI1B, Mary)
                        new_chain: create MaryC
                        new_chain: create MaryC^PHI1B

_____________________________________________CHAINING_____________________________________________
!                 !             !                  !             !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary        ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA       ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A ! MaryB^PHI1A ! PHI2B^PHI1A ! gamblersB^PHI2A !
!                 !             !                  ! MaryC^PHI1B ! PHI2C^PHI1B ! gamblersC^PHI1A !
!                 !             !                  !             !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_____________!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, Las Vegas)
                sc(PHI1, Las Vegas) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, interest)
                sc(PHI1, interest) = True
                agr(PHI1, interest) = True
                rnr(PHI1, interest) = True
                chaining_e_to_n(PHI1A, interest)
                    agr(PHI1A, interest) = True
                    new_chain(PHI1A, interest)
                        new_chain: create interestC
                        new_chain: create interestC^PHI1A

_____________________________________________CHAINING_____________________________________________
!                 !             !                  !             !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary        ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA       ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A ! MaryB^PHI1A ! PHI2B^PHI1A ! gamblersB^PHI2A !
! interestC^PHI1A !             !                  ! MaryC^PHI1B ! PHI2C^PHI1B ! gamblersC^PHI1A !
!                 !             !                  !             !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_____________!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1B, interest)
                    agr(PHI1B, interest) = True
                    new_chain(PHI1B, interest)
                        new_chain: create interestD
                        new_chain: create interestD^PHI1B

_____________________________________________CHAINING_____________________________________________
!                 !             !                  !             !             !                 !
! interest        ! PHI1        ! Las Vegas        ! Mary        ! PHI2        ! gamblers        !
! interestA       ! PHI1A       ! Las VegasA       ! MaryA       ! PHI2A       ! gamblersA       !
! interestB^PHI2A ! PHI1B^PHI2A ! Las VegasB^PHI2A ! MaryB^PHI1A ! PHI2B^PHI1A ! gamblersB^PHI2A !
! interestC^PHI1A !             !                  ! MaryC^PHI1B ! PHI2C^PHI1B ! gamblersC^PHI1A !
! interestD^PHI1B !             !                  !             !             ! gamblersD^PHI1B !
!_________________!_____________!__________________!_____________!_____________!_________________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (5.2) June hates flowers, but she waters them anyway.
#
################################################################

chaining
    init_table

______________CHAINING_____________
!       !          !      !       !
! June  ! flowers  ! she  ! them  !
! JuneA ! flowersA ! sheA ! themA !
!_______!__________!______!_______!

    init_table: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, she)
                sc(them, she) = True
                agr(them, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, flowers)
                sc(them, flowers) = True
                agr(them, flowers) = True
                rnr(them, flowers) = True
                chaining_e_to_n(themA, flowers)
                    agr(themA, flowers) = True
                    new_chain(themA, flowers)
                        new_chain: create flowersB
                        new_chain: create flowersB^themA

_________________CHAINING________________
!       !                !      !       !
! June  ! flowers        ! she  ! them  !
! JuneA ! flowersA       ! sheA ! themA !
!       ! flowersB^themA !      !       !
!_______!________________!______!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(them, June)
                sc(them, June) = True
                agr(them, June) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, them)
                sc(she, them) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, flowers)
                sc(she, flowers) = True
                agr(she, flowers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, June)
                sc(she, June) = True
                agr(she, June) = True
                rnr(she, June) = True
                chaining_e_to_n(sheA, June)
                    agr(sheA, June) = True
                    new_chain(sheA, June)
                        new_chain: create JuneB
                        new_chain: create JuneB^sheA

___________________CHAINING___________________
!            !                !      !       !
! June       ! flowers        ! she  ! them  !
! JuneA      ! flowersA       ! sheA ! themA !
! JuneB^sheA ! flowersB^themA !      !       !
!____________!________________!______!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (8.1) John wants to give June a present, but he isn't sure she’ll like it.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!       !      !       !          !     !      !     !
! John  ! PHI  ! June  ! present  ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA ! heA ! sheA ! itA !
!_______!______!_______!__________!_____!______!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, she)
                sc(it, she) = True
                agr(it, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, he)
                sc(it, he) = True
                agr(it, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, present)
                sc(it, present) = True
                agr(it, present) = True
                rnr(it, present) = True
                chaining_e_to_n(itA, present)
                    agr(itA, present) = True
                    new_chain(itA, present)
                        new_chain: create presentB
                        new_chain: create presentB^itA

_________________________CHAINING_________________________
!       !      !       !              !     !      !     !
! John  ! PHI  ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA     ! heA ! sheA ! itA !
!       !      !       ! presentB^itA !     !      !     !
!_______!______!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, June)
                sc(it, June) = True
                agr(it, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI)
                sc(it, PHI) = True
                agr(it, PHI) = True
                rnr(it, PHI) = True
                chaining_e_to_n(itA, PHI)
                    agr(itA, PHI) = True
                    new_chain(itA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^itA

___________________________CHAINING___________________________
!       !          !       !              !     !      !     !
! John  ! PHI      ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA !       ! presentB^itA !     !      !     !
!_______!__________!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, John)
                sc(it, John) = True
                agr(it, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, it)
                sc(she, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, he)
                sc(she, he) = True
                agr(she, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, present)
                sc(she, present) = True
                agr(she, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, June)
                sc(she, June) = True
                agr(she, June) = True
                rnr(she, June) = True
                chaining_e_to_n(sheA, June)
                    agr(sheA, June) = True
                    new_chain(sheA, June)
                        new_chain: create JuneB
                        new_chain: create JuneB^sheA

______________________________CHAINING_____________________________
!       !          !            !              !     !      !     !
! John  ! PHI      ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA ! JuneB^sheA ! presentB^itA !     !      !     !
!_______!__________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, PHI)
                sc(she, PHI) = True
                agr(she, PHI) = True
                rnr(she, PHI) = True
                chaining_e_to_n(sheA, PHI)
                    agr(sheA, PHI) = True
                    new_chain(sheA, PHI)
                        new_chain: create PHIC
                        new_chain: create PHIC^sheA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, John)
                sc(she, John) = True
                agr(she, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, it)
                sc(he, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, she)
                sc(he, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, present)
                sc(he, present) = True
                agr(he, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, June)
                sc(he, June) = True
                agr(he, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, PHI)
                sc(he, PHI) = True
                agr(he, PHI) = True
                rnr(he, PHI) = True
                chaining_e_to_n(heA, PHI)
                    agr(heA, PHI) = True
                    new_chain(heA, PHI)
                        new_chain: create PHID
                        new_chain: create PHID^heA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!       ! PHID^heA  !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

________________________________CHAINING________________________________
!           !           !            !              !     !      !     !
! John      ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA     ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!           ! PHIC^sheA !            !              !     !      !     !
!           ! PHID^heA  !            !              !     !      !     !
!___________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, it)
                sc(PHI, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, she)
                sc(PHI, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, he)
                sc(PHI, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, present)
                sc(PHI, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, June)
                sc(PHI, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHIA

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
!            ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIC, John)
                    agr(PHIC, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHID, John)
                    agr(PHID, John) = True
                    new_chain(PHID, John)
                        new_chain: create JohnD
                        new_chain: create JohnD^PHID

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
! JohnD^PHID ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.1) John wants to give June a present, but he isn't sure she’ll like it.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!       !      !       !          !     !      !     !
! John  ! PHI  ! June  ! present  ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA ! heA ! sheA ! itA !
!_______!______!_______!__________!_____!______!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, she)
                sc(it, she) = True
                agr(it, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, he)
                sc(it, he) = True
                agr(it, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, present)
                sc(it, present) = True
                agr(it, present) = True
                rnr(it, present) = True
                chaining_e_to_n(itA, present)
                    agr(itA, present) = True
                    new_chain(itA, present)
                        new_chain: create presentB
                        new_chain: create presentB^itA

_________________________CHAINING_________________________
!       !      !       !              !     !      !     !
! John  ! PHI  ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA     ! heA ! sheA ! itA !
!       !      !       ! presentB^itA !     !      !     !
!_______!______!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, June)
                sc(it, June) = True
                agr(it, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI)
                sc(it, PHI) = True
                agr(it, PHI) = True
                rnr(it, PHI) = True
                chaining_e_to_n(itA, PHI)
                    agr(itA, PHI) = True
                    new_chain(itA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^itA

___________________________CHAINING___________________________
!       !          !       !              !     !      !     !
! John  ! PHI      ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA !       ! presentB^itA !     !      !     !
!_______!__________!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, John)
                sc(it, John) = True
                agr(it, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, it)
                sc(she, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, he)
                sc(she, he) = True
                agr(she, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, present)
                sc(she, present) = True
                agr(she, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, June)
                sc(she, June) = True
                agr(she, June) = True
                rnr(she, June) = True
                chaining_e_to_n(sheA, June)
                    agr(sheA, June) = True
                    new_chain(sheA, June)
                        new_chain: create JuneB
                        new_chain: create JuneB^sheA

______________________________CHAINING_____________________________
!       !          !            !              !     !      !     !
! John  ! PHI      ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA ! JuneB^sheA ! presentB^itA !     !      !     !
!_______!__________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, PHI)
                sc(she, PHI) = True
                agr(she, PHI) = True
                rnr(she, PHI) = True
                chaining_e_to_n(sheA, PHI)
                    agr(sheA, PHI) = True
                    new_chain(sheA, PHI)
                        new_chain: create PHIC
                        new_chain: create PHIC^sheA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, John)
                sc(she, John) = True
                agr(she, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, it)
                sc(he, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, she)
                sc(he, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, present)
                sc(he, present) = True
                agr(he, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, June)
                sc(he, June) = True
                agr(he, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, PHI)
                sc(he, PHI) = True
                agr(he, PHI) = True
                rnr(he, PHI) = True
                chaining_e_to_n(heA, PHI)
                    agr(heA, PHI) = True
                    new_chain(heA, PHI)
                        new_chain: create PHID
                        new_chain: create PHID^heA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!       ! PHID^heA  !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

________________________________CHAINING________________________________
!           !           !            !              !     !      !     !
! John      ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA     ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!           ! PHIC^sheA !            !              !     !      !     !
!           ! PHID^heA  !            !              !     !      !     !
!___________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, it)
                sc(PHI, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, she)
                sc(PHI, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, he)
                sc(PHI, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, present)
                sc(PHI, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, June)
                sc(PHI, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHIA

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
!            ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIC, John)
                    agr(PHIC, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHID, John)
                    agr(PHID, John) = True
                    new_chain(PHID, John)
                        new_chain: create JohnD
                        new_chain: create JohnD^PHID

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
! JohnD^PHID ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.2) Janet saw herself.
#
################################################################

chaining
    init_table

_______CHAINING______
!        !          !
! Janet  ! herself  !
! JanetA ! herselfA !
!________!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: Janet
            chaining_n_to_n(herself, Janet)
                sc(herself, Janet) = True
                agr(herself, Janet) = True
                rnr(herself, Janet) = True
                chaining_e_to_n(herselfA, Janet)
                    agr(herselfA, Janet) = True
                    new_chain(herselfA, Janet)
                        new_chain: create JanetB
                        new_chain: create JanetB^herselfA

___________CHAINING___________
!                 !          !
! Janet           ! herself  !
! JanetA          ! herselfA !
! JanetB^herselfA !          !
!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(Janet)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.3) Janet saw her.
#
################################################################

chaining
    init_table

_____CHAINING____
!        !      !
! Janet  ! her  !
! JanetA ! herA !
!________!______!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, Janet)
                sc(her, Janet) = True
                agr(her, Janet) = True
                rnr(her, Janet) = True
                chaining_e_to_n(herA, Janet)
                    agr(herA, Janet) = True
                    new_chain(herA, Janet)
                        new_chain: create JanetB
                        new_chain: create JanetB^herA

_______CHAINING_______
!             !      !
! Janet       ! her  !
! JanetA      ! herA !
! JanetB^herA !      !
!_____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.4) *Janet saw himself.
#
################################################################

chaining
    init_table

_______CHAINING______
!        !          !
! Janet  ! himself  !
! JanetA ! himselfA !
!________!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: Janet
            chaining_n_to_n(himself, Janet)
                sc(himself, Janet) = True
                agr(himself, Janet) = False
            chaining_n_to_n: exiting
            simplex_pred(Janet)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.5) The men threw a smokescreen around themselves.
#
################################################################

chaining
    init_table

_______________CHAINING______________
!      !              !             !
! men  ! smokescreen  ! themselves  !
! menA ! smokescreenA ! themselvesA !
!______!______________!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: smokescreen
            chaining_n_to_n(themselves, smokescreen)
                sc(themselves, smokescreen) = True
                agr(themselves, smokescreen) = False
            chaining_n_to_n: exiting
            simplex_pred(smokescreen)
            simplex_pred: men
            chaining_n_to_n(themselves, men)
                sc(themselves, men) = True
                agr(themselves, men) = True
                rnr(themselves, men) = True
                chaining_e_to_n(themselvesA, men)
                    agr(themselvesA, men) = True
                    new_chain(themselvesA, men)
                        new_chain: create menB
                        new_chain: create menB^themselvesA

_____________________CHAINING____________________
!                  !              !             !
! men              ! smokescreen  ! themselves  !
! menA             ! smokescreenA ! themselvesA !
! menB^themselvesA !              !             !
!__________________!______________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(men)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.6) The men found a smokescreen around them.
#
################################################################

chaining
    init_table

____________CHAINING___________
!      !              !       !
! men  ! smokescreen  ! them  !
! menA ! smokescreenA ! themA !
!______!______________!_______!

    init_table: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, smokescreen)
                sc(them, smokescreen) = True
                agr(them, smokescreen) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, men)
                sc(them, men) = True
                agr(them, men) = True
                rnr(them, men) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.7) The men found a smokescreen to be around them.
#
################################################################

chaining
    init_table

____________CHAINING___________
!      !              !       !
! men  ! smokescreen  ! them  !
! menA ! smokescreenA ! themA !
!______!______________!_______!

    init_table: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, smokescreen)
                sc(them, smokescreen) = True
                agr(them, smokescreen) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, men)
                sc(them, men) = True
                agr(them, men) = True
                rnr(them, men) = True
                chaining_e_to_n(themA, men)
                    agr(themA, men) = True
                    new_chain(themA, men)
                        new_chain: create menB
                        new_chain: create menB^themA

_______________CHAINING______________
!            !              !       !
! men        ! smokescreen  ! them  !
! menA       ! smokescreenA ! themA !
! menB^themA !              !       !
!____________!______________!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.8) The men found a smokescreen and it was around them.
#
################################################################

chaining
    init_table

_______________CHAINING______________
!      !              !     !       !
! men  ! smokescreen  ! it  ! them  !
! menA ! smokescreenA ! itA ! themA !
!______!______________!_____!_______!

    init_table: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, it)
                sc(them, it) = True
                agr(them, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, smokescreen)
                sc(them, smokescreen) = True
                agr(them, smokescreen) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, men)
                sc(them, men) = True
                agr(them, men) = True
                rnr(them, men) = True
                chaining_e_to_n(themA, men)
                    agr(themA, men) = True
                    new_chain(themA, men)
                        new_chain: create menB
                        new_chain: create menB^themA

__________________CHAINING_________________
!            !              !     !       !
! men        ! smokescreen  ! it  ! them  !
! menA       ! smokescreenA ! itA ! themA !
! menB^themA !              !     !       !
!____________!______________!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, them)
                sc(it, them) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, smokescreen)
                sc(it, smokescreen) = True
                agr(it, smokescreen) = True
                rnr(it, smokescreen) = True
                chaining_e_to_n(itA, smokescreen)
                    agr(itA, smokescreen) = True
                    new_chain(itA, smokescreen)
                        new_chain: create smokescreenB
                        new_chain: create smokescreenB^itA

____________________CHAINING___________________
!            !                  !     !       !
! men        ! smokescreen      ! it  ! them  !
! menA       ! smokescreenA     ! itA ! themA !
! menB^themA ! smokescreenB^itA !     !       !
!____________!__________________!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, men)
                sc(it, men) = True
                agr(it, men) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.9) I told John to protect himself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!    !       !      !          !
! I  ! John  ! PHI  ! himself  !
! IA ! JohnA ! PHIA ! himselfA !
!____!_______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_________________CHAINING________________
!    !       !               !          !
! I  ! John  ! PHI           ! himself  !
! IA ! JohnA ! PHIA          ! himselfA !
!    !       ! PHIB^himselfA !          !
!____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^PHIA

___________________CHAINING___________________
!    !            !               !          !
! I  ! John       ! PHI           ! himself  !
! IA ! JohnA      ! PHIA          ! himselfA !
!    ! JohnB^PHIA ! PHIB^himselfA !          !
!____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = True
                    new_chain(PHIB, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHIB

___________________CHAINING___________________
!    !            !               !          !
! I  ! John       ! PHI           ! himself  !
! IA ! JohnA      ! PHIA          ! himselfA !
!    ! JohnB^PHIA ! PHIB^himselfA !          !
!    ! JohnC^PHIB !               !          !
!____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = True
                chaining_e_to_n(PHIA, I)
                    agr(PHIA, I) = True
                    new_chain(PHIA, I)
                        new_chain: create IB
                        new_chain: create IB^PHIA

______________________CHAINING_____________________
!         !            !               !          !
! I       ! John       ! PHI           ! himself  !
! IA      ! JohnA      ! PHIA          ! himselfA !
! IB^PHIA ! JohnB^PHIA ! PHIB^himselfA !          !
!         ! JohnC^PHIB !               !          !
!_________!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I)
                    agr(PHIB, I) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, himself)
                sc(I, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, John)
                sc(I, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.10) I told John to protect me.
#
################################################################

chaining
    init_table

__________CHAINING_________
!    !       !      !     !
! I  ! John  ! PHI  ! me  !
! IA ! JohnA ! PHIA ! meA !
!____!_______!______!_____!

    init_table: exiting
    chaining_n(me)
        non_refl_chaining(me)
            chaining_n_to_n(me, PHI)
                sc(me, PHI) = True
                agr(me, PHI) = True
                rnr(me, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, John)
                sc(me, John) = True
                agr(me, John) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, I)
                sc(me, I) = True
                agr(me, I) = True
                rnr(me, I) = True
                chaining_e_to_n(meA, I)
                    agr(meA, I) = True
                    new_chain(meA, I)
                        new_chain: create IB
                        new_chain: create IB^meA

____________CHAINING___________
!        !       !      !     !
! I      ! John  ! PHI  ! me  !
! IA     ! JohnA ! PHIA ! meA !
! IB^meA !       !      !     !
!________!_______!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, me)
                sc(PHI, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^PHIA

______________CHAINING______________
!        !            !      !     !
! I      ! John       ! PHI  ! me  !
! IA     ! JohnA      ! PHIA ! meA !
! IB^meA ! JohnB^PHIA !      !     !
!________!____________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = True
                chaining_e_to_n(PHIA, I)
                    agr(PHIA, I) = True
                    new_chain(PHIA, I)
                        new_chain: create IC
                        new_chain: create IC^PHIA

_______________CHAINING______________
!         !            !      !     !
! I       ! John       ! PHI  ! me  !
! IA      ! JohnA      ! PHIA ! meA !
! IB^meA  ! JohnB^PHIA !      !     !
! IC^PHIA !            !      !     !
!_________!____________!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, me)
                sc(I, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, John)
                sc(I, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (10.11) I told John to protect myself.
#
################################################################

chaining
    init_table

____________CHAINING___________
!    !       !      !         !
! I  ! John  ! PHI  ! myself  !
! IA ! JohnA ! PHIA ! myselfA !
!____!_______!______!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: PHI
            chaining_n_to_n(myself, PHI)
                sc(myself, PHI) = True
                agr(myself, PHI) = True
                rnr(myself, PHI) = True
                chaining_e_to_n(myselfA, PHI)
                    agr(myselfA, PHI) = True
                    new_chain(myselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^myselfA

________________CHAINING_______________
!    !       !              !         !
! I  ! John  ! PHI          ! myself  !
! IA ! JohnA ! PHIA         ! myselfA !
!    !       ! PHIB^myselfA !         !
!____!_______!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, myself)
                sc(PHI, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^PHIA

__________________CHAINING__________________
!    !            !              !         !
! I  ! John       ! PHI          ! myself  !
! IA ! JohnA      ! PHIA         ! myselfA !
!    ! JohnB^PHIA ! PHIB^myselfA !         !
!____!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I)
                sc(PHI, I) = True
                agr(PHI, I) = True
                rnr(PHI, I) = True
                chaining_e_to_n(PHIA, I)
                    agr(PHIA, I) = True
                    new_chain(PHIA, I)
                        new_chain: create IB
                        new_chain: create IB^PHIA

_____________________CHAINING____________________
!         !            !              !         !
! I       ! John       ! PHI          ! myself  !
! IA      ! JohnA      ! PHIA         ! myselfA !
! IB^PHIA ! JohnB^PHIA ! PHIB^myselfA !         !
!_________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I)
                    agr(PHIB, I) = True
                    new_chain(PHIB, I)
                        new_chain: create IC
                        new_chain: create IC^PHIB

_____________________CHAINING____________________
!         !            !              !         !
! I       ! John       ! PHI          ! myself  !
! IA      ! JohnA      ! PHIA         ! myselfA !
! IB^PHIA ! JohnB^PHIA ! PHIB^myselfA !         !
! IC^PHIB !            !              !         !
!_________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I)
        non_refl_chaining(I)
            chaining_n_to_n(I, myself)
                sc(I, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, PHI)
                sc(I, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I, John)
                sc(I, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.12) Jack's house burned down, but he rebuilt it.
#
################################################################

chaining
    init_table

____________CHAINING____________
!         !        !     !     !
! Jack's  ! house  ! he  ! it  !
! Jack'sA ! houseA ! heA ! itA !
!_________!________!_____!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, he)
                sc(it, he) = True
                agr(it, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, house)
                sc(it, house) = True
                agr(it, house) = True
                rnr(it, house) = True
                chaining_e_to_n(itA, house)
                    agr(itA, house) = True
                    new_chain(itA, house)
                        new_chain: create houseB
                        new_chain: create houseB^itA

______________CHAINING______________
!         !            !     !     !
! Jack's  ! house      ! he  ! it  !
! Jack'sA ! houseA     ! heA ! itA !
!         ! houseB^itA !     !     !
!_________!____________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, Jack's)
                sc(it, Jack's) = True
                agr(it, Jack's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, it)
                sc(he, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, house)
                sc(he, house) = True
                agr(he, house) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Jack's)
                sc(he, Jack's) = True
                agr(he, Jack's) = True
                rnr(he, Jack's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.26) John owns some sheep and Harry vaccinates them.
#
################################################################

chaining
    init_table

______________CHAINING_____________
!       !        !        !       !
! John  ! sheep  ! Harry  ! them  !
! JohnA ! sheepA ! HarryA ! themA !
!_______!________!________!_______!

    init_table: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, Harry)
                sc(them, Harry) = True
                agr(them, Harry) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, sheep)
                sc(them, sheep) = True
                agr(them, sheep) = True
                rnr(them, sheep) = True
                chaining_e_to_n(themA, sheep)
                    agr(themA, sheep) = True
                    new_chain(themA, sheep)
                        new_chain: create sheepB
                        new_chain: create sheepB^themA

_________________CHAINING________________
!       !              !        !       !
! John  ! sheep        ! Harry  ! them  !
! JohnA ! sheepA       ! HarryA ! themA !
!       ! sheepB^themA !        !       !
!_______!______________!________!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(them, John)
                sc(them, John) = True
                agr(them, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.27) Mary danced with many boys and they found her interesting.
#
################################################################

chaining
    init_table

____________CHAINING____________
!       !       !       !      !
! Mary  ! boys  ! they  ! her  !
! MaryA ! boysA ! theyA ! herA !
!_______!_______!_______!______!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, they)
                sc(her, they) = True
                agr(her, they) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, boys)
                sc(her, boys) = True
                agr(her, boys) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, Mary)
                sc(her, Mary) = True
                agr(her, Mary) = True
                rnr(her, Mary) = True
                chaining_e_to_n(herA, Mary)
                    agr(herA, Mary) = True
                    new_chain(herA, Mary)
                        new_chain: create MaryB
                        new_chain: create MaryB^herA

_______________CHAINING______________
!            !       !       !      !
! Mary       ! boys  ! they  ! her  !
! MaryA      ! boysA ! theyA ! herA !
! MaryB^herA !       !       !      !
!____________!_______!_______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(they)
        non_refl_chaining(they)
            chaining_n_to_n(they, her)
                sc(they, her) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(they, boys)
                sc(they, boys) = True
                agr(they, boys) = True
                rnr(they, boys) = True
                chaining_e_to_n(theyA, boys)
                    agr(theyA, boys) = True
                    new_chain(theyA, boys)
                        new_chain: create boysB
                        new_chain: create boysB^theyA

__________________CHAINING_________________
!            !             !       !      !
! Mary       ! boys        ! they  ! her  !
! MaryA      ! boysA       ! theyA ! herA !
! MaryB^herA ! boysB^theyA !       !      !
!____________!_____________!_______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(they, Mary)
                sc(they, Mary) = True
                agr(they, Mary) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.28) John lost a pen yesterday and Bill found one today.
#
################################################################

chaining
    init_table

____________CHAINING___________
!       !      !       !      !
! John  ! pen  ! Bill  ! one  !
! JohnA ! penA ! BillA ! oneA !
!_______!______!_______!______!

    init_table: exiting
    chaining_n(one)
        non_refl_chaining(one)
            chaining_n_to_n(one, Bill)
                sc(one, Bill) = True
                agr(one, Bill) = True
                rnr(one, Bill) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(one, pen)
                sc(one, pen) = True
                agr(one, pen) = True
                rnr(one, pen) = True
                chaining_e_to_n(oneA, pen)
                    agr(oneA, pen) = True
                    new_chain(oneA, pen)
                        new_chain: create penB
                        new_chain: create penB^oneA

______________CHAINING______________
!       !           !       !      !
! John  ! pen       ! Bill  ! one  !
! JohnA ! penA      ! BillA ! oneA !
!       ! penB^oneA !       !      !
!_______!___________!_______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(one, John)
                sc(one, John) = True
                agr(one, John) = True
                rnr(one, John) = True
                chaining_e_to_n(oneA, John)
                    agr(oneA, John) = True
                    new_chain(oneA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^oneA

_________________CHAINING________________
!            !           !       !      !
! John       ! pen       ! Bill  ! one  !
! JohnA      ! penA      ! BillA ! oneA !
! JohnB^oneA ! penB^oneA !       !      !
!____________!___________!_______!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.29) John claimed to have found the solution to the problem, but Bill was sure he had found it.
#
################################################################

chaining
    init_table

__________________________CHAINING_________________________
!       !      !           !          !       !     !     !
! John  ! PHI  ! solution  ! problem  ! Bill  ! he  ! it  !
! JohnA ! PHIA ! solutionA ! problemA ! BillA ! heA ! itA !
!_______!______!___________!__________!_______!_____!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, he)
                sc(it, he) = True
                agr(it, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, Bill)
                sc(it, Bill) = True
                agr(it, Bill) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, problem)
                sc(it, problem) = True
                agr(it, problem) = True
                rnr(it, problem) = True
                chaining_e_to_n(itA, problem)
                    agr(itA, problem) = True
                    new_chain(itA, problem)
                        new_chain: create problemB
                        new_chain: create problemB^itA

____________________________CHAINING___________________________
!       !      !           !              !       !     !     !
! John  ! PHI  ! solution  ! problem      ! Bill  ! he  ! it  !
! JohnA ! PHIA ! solutionA ! problemA     ! BillA ! heA ! itA !
!       !      !           ! problemB^itA !       !     !     !
!_______!______!___________!______________!_______!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, solution)
                sc(it, solution) = True
                agr(it, solution) = True
                rnr(it, solution) = True
                chaining_e_to_n(itA, solution)
                    agr(itA, solution) = True
                    new_chain(itA, solution)
                        new_chain: create solutionB
                        new_chain: create solutionB^itA

______________________________CHAINING_____________________________
!       !      !               !              !       !     !     !
! John  ! PHI  ! solution      ! problem      ! Bill  ! he  ! it  !
! JohnA ! PHIA ! solutionA     ! problemA     ! BillA ! heA ! itA !
!       !      ! solutionB^itA ! problemB^itA !       !     !     !
!_______!______!_______________!______________!_______!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI)
                sc(it, PHI) = True
                agr(it, PHI) = True
                rnr(it, PHI) = True
                chaining_e_to_n(itA, PHI)
                    agr(itA, PHI) = True
                    new_chain(itA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^itA

________________________________CHAINING_______________________________
!       !          !               !              !       !     !     !
! John  ! PHI      ! solution      ! problem      ! Bill  ! he  ! it  !
! JohnA ! PHIA     ! solutionA     ! problemA     ! BillA ! heA ! itA !
!       ! PHIB^itA ! solutionB^itA ! problemB^itA !       !     !     !
!_______!__________!_______________!______________!_______!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, John)
                sc(it, John) = True
                agr(it, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, it)
                sc(he, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Bill)
                sc(he, Bill) = True
                agr(he, Bill) = True
                rnr(he, Bill) = True
                chaining_e_to_n(heA, Bill)
                    agr(heA, Bill) = True
                    new_chain(heA, Bill)
                        new_chain: create BillB
                        new_chain: create BillB^heA

__________________________________CHAINING_________________________________
!       !          !               !              !           !     !     !
! John  ! PHI      ! solution      ! problem      ! Bill      ! he  ! it  !
! JohnA ! PHIA     ! solutionA     ! problemA     ! BillA     ! heA ! itA !
!       ! PHIB^itA ! solutionB^itA ! problemB^itA ! BillB^heA !     !     !
!_______!__________!_______________!______________!___________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, problem)
                sc(he, problem) = True
                agr(he, problem) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, solution)
                sc(he, solution) = True
                agr(he, solution) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, PHI)
                sc(he, PHI) = True
                agr(he, PHI) = True
                rnr(he, PHI) = True
                chaining_e_to_n(heA, PHI)
                    agr(heA, PHI) = True
                    new_chain(heA, PHI)
                        new_chain: create PHIC
                        new_chain: create PHIC^heA

__________________________________CHAINING_________________________________
!       !          !               !              !           !     !     !
! John  ! PHI      ! solution      ! problem      ! Bill      ! he  ! it  !
! JohnA ! PHIA     ! solutionA     ! problemA     ! BillA     ! heA ! itA !
!       ! PHIB^itA ! solutionB^itA ! problemB^itA ! BillB^heA !     !     !
!       ! PHIC^heA !               !              !           !     !     !
!_______!__________!_______________!______________!___________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

____________________________________CHAINING___________________________________
!           !          !               !              !           !     !     !
! John      ! PHI      ! solution      ! problem      ! Bill      ! he  ! it  !
! JohnA     ! PHIA     ! solutionA     ! problemA     ! BillA     ! heA ! itA !
! JohnB^heA ! PHIB^itA ! solutionB^itA ! problemB^itA ! BillB^heA !     !     !
!           ! PHIC^heA !               !              !           !     !     !
!___________!__________!_______________!______________!___________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, it)
                sc(PHI, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, he)
                sc(PHI, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Bill)
                sc(PHI, Bill) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, problem)
                sc(PHI, problem) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, solution)
                sc(PHI, solution) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHIA

____________________________________CHAINING____________________________________
!            !          !               !              !           !     !     !
! John       ! PHI      ! solution      ! problem      ! Bill      ! he  ! it  !
! JohnA      ! PHIA     ! solutionA     ! problemA     ! BillA     ! heA ! itA !
! JohnB^heA  ! PHIB^itA ! solutionB^itA ! problemB^itA ! BillB^heA !     !     !
! JohnC^PHIA ! PHIC^heA !               !              !           !     !     !
!____________!__________!_______________!______________!___________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIC, John)
                    agr(PHIC, John) = True
                    new_chain(PHIC, John)
                        new_chain: create JohnD
                        new_chain: create JohnD^PHIC

____________________________________CHAINING____________________________________
!            !          !               !              !           !     !     !
! John       ! PHI      ! solution      ! problem      ! Bill      ! he  ! it  !
! JohnA      ! PHIA     ! solutionA     ! problemA     ! BillA     ! heA ! itA !
! JohnB^heA  ! PHIB^itA ! solutionB^itA ! problemB^itA ! BillB^heA !     !     !
! JohnC^PHIA ! PHIC^heA !               !              !           !     !     !
! JohnD^PHIC !          !               !              !           !     !     !
!____________!__________!_______________!______________!___________!_____!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.30) John wants to catch a fish and eat it for supper.
#
################################################################

chaining
    init_table

_____________________CHAINING____________________
!       !       !       !       !     !         !
! John  ! PHI1  ! fish  ! PHI2  ! it  ! supper  !
! JohnA ! PHI1A ! fishA ! PHI2A ! itA ! supperA !
!_______!_______!_______!_______!_____!_________!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, supper)
                sc(it, supper) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI2)
                sc(it, PHI2) = True
                agr(it, PHI2) = True
                rnr(it, PHI2) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, fish)
                sc(it, fish) = True
                agr(it, fish) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI1)
                sc(it, PHI1) = True
                agr(it, PHI1) = True
                rnr(it, PHI1) = True
                chaining_e_to_n(itA, PHI1)
                    agr(itA, PHI1) = True
                    new_chain(itA, PHI1)
                        new_chain: create PHI1B
                        new_chain: create PHI1B^itA

_______________________CHAINING______________________
!       !           !       !       !     !         !
! John  ! PHI1      ! fish  ! PHI2  ! it  ! supper  !
! JohnA ! PHI1A     ! fishA ! PHI2A ! itA ! supperA !
!       ! PHI1B^itA !       !       !     !         !
!_______!___________!_______!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, John)
                sc(it, John) = True
                agr(it, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI2)
        non_refl_chaining(PHI2)
            chaining_n_to_n(PHI2, supper)
                sc(PHI2, supper) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, it)
                sc(PHI2, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, fish)
                sc(PHI2, fish) = True
                agr(PHI2, fish) = True
                rnr(PHI2, fish) = True
                chaining_e_to_n(PHI2A, fish)
                    agr(PHI2A, fish) = True
                    new_chain(PHI2A, fish)
                        new_chain: create fishB
                        new_chain: create fishB^PHI2A

__________________________CHAINING_________________________
!       !           !             !       !     !         !
! John  ! PHI1      ! fish        ! PHI2  ! it  ! supper  !
! JohnA ! PHI1A     ! fishA       ! PHI2A ! itA ! supperA !
!       ! PHI1B^itA ! fishB^PHI2A !       !     !         !
!_______!___________!_____________!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, PHI1)
                sc(PHI2, PHI1) = True
                agr(PHI2, PHI1) = True
                rnr(PHI2, PHI1) = True
                chaining_e_to_n(PHI2A, PHI1)
                    agr(PHI2A, PHI1) = True
                    new_chain(PHI2A, PHI1)
                        new_chain: create PHI1C
                        new_chain: create PHI1C^PHI2A

___________________________CHAINING__________________________
!       !             !             !       !     !         !
! John  ! PHI1        ! fish        ! PHI2  ! it  ! supper  !
! JohnA ! PHI1A       ! fishA       ! PHI2A ! itA ! supperA !
!       ! PHI1B^itA   ! fishB^PHI2A !       !     !         !
!       ! PHI1C^PHI2A !             !       !     !         !
!_______!_____________!_____________!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI2, John)
                sc(PHI2, John) = True
                agr(PHI2, John) = True
                rnr(PHI2, John) = True
                chaining_e_to_n(PHI2A, John)
                    agr(PHI2A, John) = True
                    new_chain(PHI2A, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^PHI2A

______________________________CHAINING_____________________________
!             !             !             !       !     !         !
! John        ! PHI1        ! fish        ! PHI2  ! it  ! supper  !
! JohnA       ! PHI1A       ! fishA       ! PHI2A ! itA ! supperA !
! JohnB^PHI2A ! PHI1B^itA   ! fishB^PHI2A !       !     !         !
!             ! PHI1C^PHI2A !             !       !     !         !
!_____________!_____________!_____________!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI1)
        non_refl_chaining(PHI1)
            chaining_n_to_n(PHI1, supper)
                sc(PHI1, supper) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, it)
                sc(PHI1, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, PHI2)
                sc(PHI1, PHI2) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, fish)
                sc(PHI1, fish) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI1, John)
                sc(PHI1, John) = True
                agr(PHI1, John) = True
                rnr(PHI1, John) = True
                chaining_e_to_n(PHI1A, John)
                    agr(PHI1A, John) = True
                    new_chain(PHI1A, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHI1A

______________________________CHAINING_____________________________
!             !             !             !       !     !         !
! John        ! PHI1        ! fish        ! PHI2  ! it  ! supper  !
! JohnA       ! PHI1A       ! fishA       ! PHI2A ! itA ! supperA !
! JohnB^PHI2A ! PHI1B^itA   ! fishB^PHI2A !       !     !         !
! JohnC^PHI1A ! PHI1C^PHI2A !             !       !     !         !
!_____________!_____________!_____________!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1B, John)
                    agr(PHI1B, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHI1C, John)
                    agr(PHI1C, John) = True
                    new_chain(PHI1C, John)
                        new_chain: create JohnD
                        new_chain: create JohnD^PHI1C

______________________________CHAINING_____________________________
!             !             !             !       !     !         !
! John        ! PHI1        ! fish        ! PHI2  ! it  ! supper  !
! JohnA       ! PHI1A       ! fishA       ! PHI2A ! itA ! supperA !
! JohnB^PHI2A ! PHI1B^itA   ! fishB^PHI2A !       !     !         !
! JohnC^PHI1A ! PHI1C^PHI2A !             !       !     !         !
! JohnD^PHI1C !             !             !       !     !         !
!_____________!_____________!_____________!_______!_____!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.31) No one would put the blame on himself.
#
################################################################

chaining
    init_table

______________CHAINING_____________
!      !      !        !          !
! one  ! PHI  ! blame  ! himself  !
! oneA ! PHIA ! blameA ! himselfA !
!______!______!________!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: blame
            chaining_n_to_n(himself, blame)
                sc(himself, blame) = True
                agr(himself, blame) = True
                rnr(himself, blame) = True
                chaining_e_to_n(himselfA, blame)
                    agr(himselfA, blame) = True
                    new_chain(himselfA, blame)
                        new_chain: create blameB
                        new_chain: create blameB^himselfA

__________________CHAINING__________________
!      !      !                 !          !
! one  ! PHI  ! blame           ! himself  !
! oneA ! PHIA ! blameA          ! himselfA !
!      !      ! blameB^himselfA !          !
!______!______!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(blame)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_______________________CHAINING______________________
!      !               !                 !          !
! one  ! PHI           ! blame           ! himself  !
! oneA ! PHIA          ! blameA          ! himselfA !
!      ! PHIB^himselfA ! blameB^himselfA !          !
!______!_______________!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, blame)
                sc(PHI, blame) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, one)
                sc(PHI, one) = True
                agr(PHI, one) = True
                rnr(PHI, one) = True
                chaining_e_to_n(PHIA, one)
                    agr(PHIA, one) = True
                    new_chain(PHIA, one)
                        new_chain: create oneB
                        new_chain: create oneB^PHIA

_________________________CHAINING_________________________
!           !               !                 !          !
! one       ! PHI           ! blame           ! himself  !
! oneA      ! PHIA          ! blameA          ! himselfA !
! oneB^PHIA ! PHIB^himselfA ! blameB^himselfA !          !
!___________!_______________!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, one)
                    agr(PHIB, one) = True
                    new_chain(PHIB, one)
                        new_chain: create oneC
                        new_chain: create oneC^PHIB

_________________________CHAINING_________________________
!           !               !                 !          !
! one       ! PHI           ! blame           ! himself  !
! oneA      ! PHIA          ! blameA          ! himselfA !
! oneB^PHIA ! PHIB^himselfA ! blameB^himselfA !          !
! oneC^PHIB !               !                 !          !
!___________!_______________!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(one)
        non_refl_chaining(one)
            chaining_n_to_n(one, himself)
                sc(one, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(one, blame)
                sc(one, blame) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(one, PHI)
                sc(one, PHI) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.32) Sue told Sandy about herself.
#
################################################################

chaining
    init_table

__________CHAINING__________
!      !        !          !
! Sue  ! Sandy  ! herself  !
! SueA ! SandyA ! herselfA !
!______!________!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: Sandy
            chaining_n_to_n(herself, Sandy)
                sc(herself, Sandy) = True
                agr(herself, Sandy) = True
                rnr(herself, Sandy) = True
                chaining_e_to_n(herselfA, Sandy)
                    agr(herselfA, Sandy) = True
                    new_chain(herselfA, Sandy)
                        new_chain: create SandyB
                        new_chain: create SandyB^herselfA

_______________CHAINING______________
!      !                 !          !
! Sue  ! Sandy           ! herself  !
! SueA ! SandyA          ! herselfA !
!      ! SandyB^herselfA !          !
!______!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(Sandy)
            simplex_pred: Sue
            chaining_n_to_n(herself, Sue)
                sc(herself, Sue) = True
                agr(herself, Sue) = True
                rnr(herself, Sue) = True
                chaining_e_to_n(herselfA, Sue)
                    agr(herselfA, Sue) = True
                    new_chain(herselfA, Sue)
                        new_chain: create SueB
                        new_chain: create SueB^herselfA

___________________CHAINING___________________
!               !                 !          !
! Sue           ! Sandy           ! herself  !
! SueA          ! SandyA          ! herselfA !
! SueB^herselfA ! SandyB^herselfA !          !
!_______________!_________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(Sue)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.33) *Jill kept talking about himself.
#
################################################################

chaining
    init_table

______CHAINING______
!       !          !
! Jill  ! himself  !
! JillA ! himselfA !
!_______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: Jill
            chaining_n_to_n(himself, Jill)
                sc(himself, Jill) = True
                agr(himself, Jill) = False
            chaining_n_to_n: exiting
            simplex_pred(Jill)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.34) Does Jack's making a pig of himself bother Bill?
#
################################################################

chaining
    init_table

_______________CHAINING______________
!         !      !          !       !
! Jack's  ! pig  ! himself  ! Bill  !
! Jack'sA ! pigA ! himselfA ! BillA !
!_________!______!__________!_______!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: pig
            chaining_n_to_n(himself, pig)
                sc(himself, pig) = True
                agr(himself, pig) = True
                rnr(himself, pig) = True
                chaining_e_to_n(himselfA, pig)
                    agr(himselfA, pig) = True
                    new_chain(himselfA, pig)
                        new_chain: create pigB
                        new_chain: create pigB^himselfA

___________________CHAINING___________________
!         !               !          !       !
! Jack's  ! pig           ! himself  ! Bill  !
! Jack'sA ! pigA          ! himselfA ! BillA !
!         ! pigB^himselfA !          !       !
!_________!_______________!__________!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(pig)
            simplex_pred: Jack's
            chaining_n_to_n(himself, Jack's)
                sc(himself, Jack's) = True
                agr(himself, Jack's) = True
                rnr(himself, Jack's) = False
            chaining_n_to_n: exiting
            simplex_pred(Jack's)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.35) John wants to give June a present, but he is afraid she won’t like it.
#
################################################################

chaining
    init_table

_______________________CHAINING_______________________
!       !      !       !          !     !      !     !
! John  ! PHI  ! June  ! present  ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA ! heA ! sheA ! itA !
!_______!______!_______!__________!_____!______!_____!

    init_table: exiting
    chaining_n(it)
        non_refl_chaining(it)
            chaining_n_to_n(it, she)
                sc(it, she) = True
                agr(it, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, he)
                sc(it, he) = True
                agr(it, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, present)
                sc(it, present) = True
                agr(it, present) = True
                rnr(it, present) = True
                chaining_e_to_n(itA, present)
                    agr(itA, present) = True
                    new_chain(itA, present)
                        new_chain: create presentB
                        new_chain: create presentB^itA

_________________________CHAINING_________________________
!       !      !       !              !     !      !     !
! John  ! PHI  ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA ! JuneA ! presentA     ! heA ! sheA ! itA !
!       !      !       ! presentB^itA !     !      !     !
!_______!______!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, June)
                sc(it, June) = True
                agr(it, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(it, PHI)
                sc(it, PHI) = True
                agr(it, PHI) = True
                rnr(it, PHI) = True
                chaining_e_to_n(itA, PHI)
                    agr(itA, PHI) = True
                    new_chain(itA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^itA

___________________________CHAINING___________________________
!       !          !       !              !     !      !     !
! John  ! PHI      ! June  ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA !       ! presentB^itA !     !      !     !
!_______!__________!_______!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(it, John)
                sc(it, John) = True
                agr(it, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(she)
        non_refl_chaining(she)
            chaining_n_to_n(she, it)
                sc(she, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, he)
                sc(she, he) = True
                agr(she, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, present)
                sc(she, present) = True
                agr(she, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(she, June)
                sc(she, June) = True
                agr(she, June) = True
                rnr(she, June) = True
                chaining_e_to_n(sheA, June)
                    agr(sheA, June) = True
                    new_chain(sheA, June)
                        new_chain: create JuneB
                        new_chain: create JuneB^sheA

______________________________CHAINING_____________________________
!       !          !            !              !     !      !     !
! John  ! PHI      ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA     ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA ! JuneB^sheA ! presentB^itA !     !      !     !
!_______!__________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, PHI)
                sc(she, PHI) = True
                agr(she, PHI) = True
                rnr(she, PHI) = True
                chaining_e_to_n(sheA, PHI)
                    agr(sheA, PHI) = True
                    new_chain(sheA, PHI)
                        new_chain: create PHIC
                        new_chain: create PHIC^sheA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(she, John)
                sc(she, John) = True
                agr(she, John) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, it)
                sc(he, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, she)
                sc(he, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, present)
                sc(he, present) = True
                agr(he, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, June)
                sc(he, June) = True
                agr(he, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, PHI)
                sc(he, PHI) = True
                agr(he, PHI) = True
                rnr(he, PHI) = True
                chaining_e_to_n(heA, PHI)
                    agr(heA, PHI) = True
                    new_chain(heA, PHI)
                        new_chain: create PHID
                        new_chain: create PHID^heA

______________________________CHAINING______________________________
!       !           !            !              !     !      !     !
! John  ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
!       ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!       ! PHIC^sheA !            !              !     !      !     !
!       ! PHID^heA  !            !              !     !      !     !
!_______!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, John)
                sc(he, John) = True
                agr(he, John) = True
                rnr(he, John) = True
                chaining_e_to_n(heA, John)
                    agr(heA, John) = True
                    new_chain(heA, John)
                        new_chain: create JohnB
                        new_chain: create JohnB^heA

________________________________CHAINING________________________________
!           !           !            !              !     !      !     !
! John      ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA     ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
!           ! PHIC^sheA !            !              !     !      !     !
!           ! PHID^heA  !            !              !     !      !     !
!___________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, it)
                sc(PHI, it) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, she)
                sc(PHI, she) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, he)
                sc(PHI, he) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, present)
                sc(PHI, present) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, June)
                sc(PHI, June) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, John)
                sc(PHI, John) = True
                agr(PHI, John) = True
                rnr(PHI, John) = True
                chaining_e_to_n(PHIA, John)
                    agr(PHIA, John) = True
                    new_chain(PHIA, John)
                        new_chain: create JohnC
                        new_chain: create JohnC^PHIA

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
!            ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, John)
                    agr(PHIB, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIC, John)
                    agr(PHIC, John) = False
                chaining_e_to_n: exiting
                chaining_e_to_n(PHID, John)
                    agr(PHID, John) = True
                    new_chain(PHID, John)
                        new_chain: create JohnD
                        new_chain: create JohnD^PHID

_________________________________CHAINING________________________________
!            !           !            !              !     !      !     !
! John       ! PHI       ! June       ! present      ! he  ! she  ! it  !
! JohnA      ! PHIA      ! JuneA      ! presentA     ! heA ! sheA ! itA !
! JohnB^heA  ! PHIB^itA  ! JuneB^sheA ! presentB^itA !     !      !     !
! JohnC^PHIA ! PHIC^sheA !            !              !     !      !     !
! JohnD^PHID ! PHID^heA  !            !              !     !      !     !
!____________!___________!____________!______________!_____!______!_____!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (11.36) Ernie doesn't like Bernie, because he is such an asshole.
#
################################################################

chaining
    init_table

_______________CHAINING______________
!        !         !     !          !
! Ernie  ! Bernie  ! he  ! asshole  !
! ErnieA ! BernieA ! heA ! assholeA !
!________!_________!_____!__________!

    init_table: exiting
    chaining_n(he)
        non_refl_chaining(he)
            chaining_n_to_n(he, asshole)
                sc(he, asshole) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Bernie)
                sc(he, Bernie) = True
                agr(he, Bernie) = True
                rnr(he, Bernie) = True
                chaining_e_to_n(heA, Bernie)
                    agr(heA, Bernie) = True
                    new_chain(heA, Bernie)
                        new_chain: create BernieB
                        new_chain: create BernieB^heA

_________________CHAINING________________
!        !             !     !          !
! Ernie  ! Bernie      ! he  ! asshole  !
! ErnieA ! BernieA     ! heA ! assholeA !
!        ! BernieB^heA !     !          !
!________!_____________!_____!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(he, Ernie)
                sc(he, Ernie) = True
                agr(he, Ernie) = True
                rnr(he, Ernie) = True
                chaining_e_to_n(heA, Ernie)
                    agr(heA, Ernie) = True
                    new_chain(heA, Ernie)
                        new_chain: create ErnieB
                        new_chain: create ErnieB^heA

___________________CHAINING__________________
!            !             !     !          !
! Ernie      ! Bernie      ! he  ! asshole  !
! ErnieA     ! BernieA     ! heA ! assholeA !
! ErnieB^heA ! BernieB^heA !     !          !
!____________!_____________!_____!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.2) Mary's father killed himself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!         !         !          !
! Mary's  ! father  ! himself  !
! Mary'sA ! fatherA ! himselfA !
!_________!_________!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: father
            chaining_n_to_n(himself, father)
                sc(himself, father) = True
                agr(himself, father) = True
                rnr(himself, father) = True
                chaining_e_to_n(himselfA, father)
                    agr(himselfA, father) = True
                    new_chain(himselfA, father)
                        new_chain: create fatherB
                        new_chain: create fatherB^himselfA

_________________CHAINING________________
!         !                  !          !
! Mary's  ! father           ! himself  !
! Mary'sA ! fatherA          ! himselfA !
!         ! fatherB^himselfA !          !
!_________!__________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(father)
            simplex_pred: Mary's
            chaining_n_to_n(himself, Mary's)
                sc(himself, Mary's) = True
                agr(himself, Mary's) = False
            chaining_n_to_n: exiting
            simplex_pred(Mary's)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.3) *Mary's father killed him.
#
################################################################

chaining
    init_table

__________CHAINING__________
!         !         !      !
! Mary's  ! father  ! him  !
! Mary'sA ! fatherA ! himA !
!_________!_________!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, father)
                sc(him, father) = True
                agr(him, father) = True
                rnr(him, father) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, Mary's)
                sc(him, Mary's) = True
                agr(him, Mary's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.4) *Mary's father killed herself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!         !         !          !
! Mary's  ! father  ! herself  !
! Mary'sA ! fatherA ! herselfA !
!_________!_________!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: father
            chaining_n_to_n(herself, father)
                sc(herself, father) = True
                agr(herself, father) = False
            chaining_n_to_n: exiting
            simplex_pred(father)
            simplex_pred: Mary's
            chaining_n_to_n(herself, Mary's)
                sc(herself, Mary's) = True
                agr(herself, Mary's) = True
                rnr(herself, Mary's) = False
            chaining_n_to_n: exiting
            simplex_pred(Mary's)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.5) Mary's father killed her.
#
################################################################

chaining
    init_table

__________CHAINING__________
!         !         !      !
! Mary's  ! father  ! her  !
! Mary'sA ! fatherA ! herA !
!_________!_________!______!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, father)
                sc(her, father) = True
                agr(her, father) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, Mary's)
                sc(her, Mary's) = True
                agr(her, Mary's) = True
                rnr(her, Mary's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.6) The father of Mary killed himself.
#
################################################################

chaining
    init_table

___________CHAINING___________
!         !       !          !
! father  ! Mary  ! himself  !
! fatherA ! MaryA ! himselfA !
!_________!_______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: Mary
            chaining_n_to_n(himself, Mary)
                sc(himself, Mary) = True
                agr(himself, Mary) = False
            chaining_n_to_n: exiting
            simplex_pred(Mary)
            simplex_pred: father
            chaining_n_to_n(himself, father)
                sc(himself, father) = True
                agr(himself, father) = True
                rnr(himself, father) = True
                chaining_e_to_n(himselfA, father)
                    agr(himselfA, father) = True
                    new_chain(himselfA, father)
                        new_chain: create fatherB
                        new_chain: create fatherB^himselfA

________________CHAINING_______________
!                  !       !          !
! father           ! Mary  ! himself  !
! fatherA          ! MaryA ! himselfA !
! fatherB^himselfA !       !          !
!__________________!_______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(father)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.7) *The father of Mary killed him.
#
################################################################

chaining
    init_table

_________CHAINING_________
!         !       !      !
! father  ! Mary  ! him  !
! fatherA ! MaryA ! himA !
!_________!_______!______!

    init_table: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, Mary)
                sc(him, Mary) = True
                agr(him, Mary) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, father)
                sc(him, father) = True
                agr(him, father) = True
                rnr(him, father) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.8) *The father of Mary killed herself.
#
################################################################

chaining
    init_table

___________CHAINING___________
!         !       !          !
! father  ! Mary  ! herself  !
! fatherA ! MaryA ! herselfA !
!_________!_______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: Mary
            chaining_n_to_n(herself, Mary)
                sc(herself, Mary) = True
                agr(herself, Mary) = True
                rnr(herself, Mary) = True
                chaining_e_to_n(herselfA, Mary)
                    agr(herselfA, Mary) = True
                    new_chain(herselfA, Mary)
                        new_chain: create MaryB
                        new_chain: create MaryB^herselfA

________________CHAINING_______________
!         !                !          !
! father  ! Mary           ! herself  !
! fatherA ! MaryA          ! herselfA !
!         ! MaryB^herselfA !          !
!_________!________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(Mary)
            simplex_pred: father
            chaining_n_to_n(herself, father)
                sc(herself, father) = True
                agr(herself, father) = False
            chaining_n_to_n: exiting
            simplex_pred(father)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.9) The father of Mary killed her.
#
################################################################

chaining
    init_table

_________CHAINING_________
!         !       !      !
! father  ! Mary  ! her  !
! fatherA ! MaryA ! herA !
!_________!_______!______!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, Mary)
                sc(her, Mary) = True
                agr(her, Mary) = True
                rnr(her, Mary) = True
                chaining_e_to_n(herA, Mary)
                    agr(herA, Mary) = True
                    new_chain(herA, Mary)
                        new_chain: create MaryB
                        new_chain: create MaryB^herA

____________CHAINING___________
!         !            !      !
! father  ! Mary       ! her  !
! fatherA ! MaryA      ! herA !
!         ! MaryB^herA !      !
!_________!____________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(her, father)
                sc(her, father) = True
                agr(her, father) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.11) Mary's mother cooks only for herself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!         !         !          !
! Mary's  ! mother  ! herself  !
! Mary'sA ! motherA ! herselfA !
!_________!_________!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: mother
            chaining_n_to_n(herself, mother)
                sc(herself, mother) = True
                agr(herself, mother) = True
                rnr(herself, mother) = True
                chaining_e_to_n(herselfA, mother)
                    agr(herselfA, mother) = True
                    new_chain(herselfA, mother)
                        new_chain: create motherB
                        new_chain: create motherB^herselfA

_________________CHAINING________________
!         !                  !          !
! Mary's  ! mother           ! herself  !
! Mary'sA ! motherA          ! herselfA !
!         ! motherB^herselfA !          !
!_________!__________________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(mother)
            simplex_pred: Mary's
            chaining_n_to_n(herself, Mary's)
                sc(herself, Mary's) = True
                agr(herself, Mary's) = True
                rnr(herself, Mary's) = False
            chaining_n_to_n: exiting
            simplex_pred(Mary's)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.12) Mary's mother cooks only for her.
#
################################################################

chaining
    init_table

__________CHAINING__________
!         !         !      !
! Mary's  ! mother  ! her  !
! Mary'sA ! motherA ! herA !
!_________!_________!______!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, mother)
                sc(her, mother) = True
                agr(her, mother) = True
                rnr(her, mother) = True
                chaining_e_to_n(herA, mother)
                    agr(herA, mother) = True
                    new_chain(herA, mother)
                        new_chain: create motherB
                        new_chain: create motherB^herA

_____________CHAINING____________
!         !              !      !
! Mary's  ! mother       ! her  !
! Mary'sA ! motherA      ! herA !
!         ! motherB^herA !      !
!_________!______________!______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(her, Mary's)
                sc(her, Mary's) = True
                agr(her, Mary's) = True
                rnr(her, Mary's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (12.13) Mary's mother cooks only for her mother.
#
################################################################

chaining
    init_table

________________CHAINING________________
!         !          !      !          !
! Mary's  ! mother1  ! her  ! mother2  !
! Mary'sA ! mother1A ! herA ! mother2A !
!_________!__________!______!__________!

    init_table: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, mother2)
                sc(her, mother2) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, mother1)
                sc(her, mother1) = True
                agr(her, mother1) = True
                rnr(her, mother1) = True
                chaining_e_to_n(herA, mother1)
                    agr(herA, mother1) = True
                    new_chain(herA, mother1)
                        new_chain: create mother1B
                        new_chain: create mother1B^herA

___________________CHAINING__________________
!         !               !      !          !
! Mary's  ! mother1       ! her  ! mother2  !
! Mary'sA ! mother1A      ! herA ! mother2A !
!         ! mother1B^herA !      !          !
!_________!_______________!______!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(her, Mary's)
                sc(her, Mary's) = True
                agr(her, Mary's) = True
                rnr(her, Mary's) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.2) It was difficult to sketch myself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!     !       !      !         !
! I0  ! you0  ! PHI  ! myself  !
! I0A ! you0A ! PHIA ! myselfA !
!_____!_______!______!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: PHI
            chaining_n_to_n(myself, PHI)
                sc(myself, PHI) = True
                agr(myself, PHI) = True
                rnr(myself, PHI) = True
                chaining_e_to_n(myselfA, PHI)
                    agr(myselfA, PHI) = True
                    new_chain(myselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^myselfA

________________CHAINING________________
!     !       !              !         !
! I0  ! you0  ! PHI          ! myself  !
! I0A ! you0A ! PHIA         ! myselfA !
!     !       ! PHIB^myselfA !         !
!_____!_______!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, myself)
                sc(PHI, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

___________________CHAINING__________________
!     !            !              !         !
! I0  ! you0       ! PHI          ! myself  !
! I0A ! you0A      ! PHIA         ! myselfA !
!     ! you0B^PHIA ! PHIB^myselfA !         !
!_____!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = True
                    new_chain(PHIB, I0)
                        new_chain: create I0C
                        new_chain: create I0C^PHIB

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
! I0C^PHIB !            !              !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, myself)
                sc(you0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, myself)
                sc(I0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.5a) It was difficult for me to sketch myself.
#
################################################################

chaining
    init_table

____________CHAINING___________
!     !       !     !         !
! I0  ! you0  ! me  ! myself  !
! I0A ! you0A ! meA ! myselfA !
!_____!_______!_____!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: me
            chaining_n_to_n(myself, me)
                sc(myself, me) = True
                agr(myself, me) = True
                rnr(myself, me) = True
                chaining_e_to_n(myselfA, me)
                    agr(myselfA, me) = True
                    new_chain(myselfA, me)
                        new_chain: create meB
                        new_chain: create meB^myselfA

________________CHAINING_______________
!     !       !             !         !
! I0  ! you0  ! me          ! myself  !
! I0A ! you0A ! meA         ! myselfA !
!     !       ! meB^myselfA !         !
!_____!_______!_____________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(me)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(me)
        non_refl_chaining(me)
            chaining_n_to_n(me, myself)
                sc(me, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, you0)
                sc(me, you0) = True
                agr(me, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, I0)
                sc(me, I0) = True
                agr(me, I0) = True
                rnr(me, I0) = True
                chaining_e_to_n(meA, I0)
                    agr(meA, I0) = True
                    new_chain(meA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^meA

__________________CHAINING_________________
!         !       !             !         !
! I0      ! you0  ! me          ! myself  !
! I0A     ! you0A ! meA         ! myselfA !
! I0B^meA !       ! meB^myselfA !         !
!_________!_______!_____________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(meB, I0)
                    agr(meB, I0) = True
                    new_chain(meB, I0)
                        new_chain: create I0C
                        new_chain: create I0C^meB

__________________CHAINING_________________
!         !       !             !         !
! I0      ! you0  ! me          ! myself  !
! I0A     ! you0A ! meA         ! myselfA !
! I0B^meA !       ! meB^myselfA !         !
! I0C^meB !       !             !         !
!_________!_______!_____________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, myself)
                sc(you0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, me)
                sc(you0, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, myself)
                sc(I0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, me)
                sc(I0, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.6a) It was difficult for you to sketch yourself.
#
################################################################

chaining
    init_table

_____________CHAINING_____________
!     !       !      !           !
! I0  ! you0  ! you  ! yourself  !
! I0A ! you0A ! youA ! yourselfA !
!_____!_______!______!___________!

    init_table: exiting
    chaining_n(yourself)
        refl_chaining(yourself)
            simplex_pred(yourself)
            simplex_pred: you
            chaining_n_to_n(yourself, you)
                sc(yourself, you) = True
                agr(yourself, you) = True
                rnr(yourself, you) = True
                chaining_e_to_n(yourselfA, you)
                    agr(yourselfA, you) = True
                    new_chain(yourselfA, you)
                        new_chain: create youB
                        new_chain: create youB^yourselfA

__________________CHAINING__________________
!     !       !                !           !
! I0  ! you0  ! you            ! yourself  !
! I0A ! you0A ! youA           ! yourselfA !
!     !       ! youB^yourselfA !           !
!_____!_______!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(you)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you)
        non_refl_chaining(you)
            chaining_n_to_n(you, yourself)
                sc(you, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you, you0)
                sc(you, you0) = True
                agr(you, you0) = True
                rnr(you, you0) = True
                chaining_e_to_n(youA, you0)
                    agr(youA, you0) = True
                    new_chain(youA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^youA

_____________________CHAINING____________________
!     !            !                !           !
! I0  ! you0       ! you            ! yourself  !
! I0A ! you0A      ! youA           ! yourselfA !
!     ! you0B^youA ! youB^yourselfA !           !
!_____!____________!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(youB, you0)
                    agr(youB, you0) = True
                    new_chain(youB, you0)
                        new_chain: create you0C
                        new_chain: create you0C^youB

_____________________CHAINING____________________
!     !            !                !           !
! I0  ! you0       ! you            ! yourself  !
! I0A ! you0A      ! youA           ! yourselfA !
!     ! you0B^youA ! youB^yourselfA !           !
!     ! you0C^youB !                !           !
!_____!____________!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(you, I0)
                sc(you, I0) = True
                agr(you, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, yourself)
                sc(you0, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, you)
                sc(you0, you) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, yourself)
                sc(I0, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you)
                sc(I0, you) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.7a) It was difficult for him to sketch himself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! him  ! himself  !
! I0A ! you0A ! himA ! himselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: him
            chaining_n_to_n(himself, him)
                sc(himself, him) = True
                agr(himself, him) = True
                rnr(himself, him) = True
                chaining_e_to_n(himselfA, him)
                    agr(himselfA, him) = True
                    new_chain(himselfA, him)
                        new_chain: create himB
                        new_chain: create himB^himselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! him           ! himself  !
! I0A ! you0A ! himA          ! himselfA !
!     !       ! himB^himselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(him)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(him)
        non_refl_chaining(him)
            chaining_n_to_n(him, himself)
                sc(him, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, you0)
                sc(him, you0) = True
                agr(him, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(him, I0)
                sc(him, I0) = True
                agr(him, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, himself)
                sc(you0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, him)
                sc(you0, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, himself)
                sc(I0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, him)
                sc(I0, him) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.8a) It was difficult for her to sketch herself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! her  ! herself  !
! I0A ! you0A ! herA ! herselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: her
            chaining_n_to_n(herself, her)
                sc(herself, her) = True
                agr(herself, her) = True
                rnr(herself, her) = True
                chaining_e_to_n(herselfA, her)
                    agr(herselfA, her) = True
                    new_chain(herselfA, her)
                        new_chain: create herB
                        new_chain: create herB^herselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! her           ! herself  !
! I0A ! you0A ! herA          ! herselfA !
!     !       ! herB^herselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(her)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(her)
        non_refl_chaining(her)
            chaining_n_to_n(her, herself)
                sc(her, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, you0)
                sc(her, you0) = True
                agr(her, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(her, I0)
                sc(her, I0) = True
                agr(her, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, herself)
                sc(you0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, her)
                sc(you0, her) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, herself)
                sc(I0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, her)
                sc(I0, her) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.9a) It was difficult for us to sketch ourselves.
#
################################################################

chaining
    init_table

_____________CHAINING_____________
!     !       !     !            !
! I0  ! you0  ! us  ! ourselves  !
! I0A ! you0A ! usA ! ourselvesA !
!_____!_______!_____!____________!

    init_table: exiting
    chaining_n(ourselves)
        refl_chaining(ourselves)
            simplex_pred(ourselves)
            simplex_pred: us
            chaining_n_to_n(ourselves, us)
                sc(ourselves, us) = True
                agr(ourselves, us) = True
                rnr(ourselves, us) = True
                chaining_e_to_n(ourselvesA, us)
                    agr(ourselvesA, us) = True
                    new_chain(ourselvesA, us)
                        new_chain: create usB
                        new_chain: create usB^ourselvesA

___________________CHAINING__________________
!     !       !                !            !
! I0  ! you0  ! us             ! ourselves  !
! I0A ! you0A ! usA            ! ourselvesA !
!     !       ! usB^ourselvesA !            !
!_____!_______!________________!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(us)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(us)
        non_refl_chaining(us)
            chaining_n_to_n(us, ourselves)
                sc(us, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(us, you0)
                sc(us, you0) = True
                agr(us, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(us, I0)
                sc(us, I0) = True
                agr(us, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, ourselves)
                sc(you0, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, us)
                sc(you0, us) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, ourselves)
                sc(I0, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, us)
                sc(I0, us) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.10a) It was difficult for you to sketch yourselves.
#
################################################################

chaining
    init_table

______________CHAINING______________
!     !       !      !             !
! I0  ! you0  ! you  ! yourselves  !
! I0A ! you0A ! youA ! yourselvesA !
!_____!_______!______!_____________!

    init_table: exiting
    chaining_n(yourselves)
        refl_chaining(yourselves)
            simplex_pred(yourselves)
            simplex_pred: you
            chaining_n_to_n(yourselves, you)
                sc(yourselves, you) = True
                agr(yourselves, you) = True
                rnr(yourselves, you) = True
                chaining_e_to_n(yourselvesA, you)
                    agr(yourselvesA, you) = True
                    new_chain(yourselvesA, you)
                        new_chain: create youB
                        new_chain: create youB^yourselvesA

____________________CHAINING____________________
!     !       !                  !             !
! I0  ! you0  ! you              ! yourselves  !
! I0A ! you0A ! youA             ! yourselvesA !
!     !       ! youB^yourselvesA !             !
!_____!_______!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(you)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you)
        non_refl_chaining(you)
            chaining_n_to_n(you, yourselves)
                sc(you, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you, you0)
                sc(you, you0) = True
                agr(you, you0) = True
                rnr(you, you0) = True
                chaining_e_to_n(youA, you0)
                    agr(youA, you0) = True
                    new_chain(youA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^youA

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! you              ! yourselves  !
! I0A ! you0A      ! youA             ! yourselvesA !
!     ! you0B^youA ! youB^yourselvesA !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(youB, you0)
                    agr(youB, you0) = True
                    new_chain(youB, you0)
                        new_chain: create you0C
                        new_chain: create you0C^youB

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! you              ! yourselves  !
! I0A ! you0A      ! youA             ! yourselvesA !
!     ! you0B^youA ! youB^yourselvesA !             !
!     ! you0C^youB !                  !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(you, I0)
                sc(you, I0) = True
                agr(you, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, yourselves)
                sc(you0, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, you)
                sc(you0, you) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, yourselves)
                sc(I0, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you)
                sc(I0, you) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.11a) It was difficult for them to sketch themselves.
#
################################################################

chaining
    init_table

_______________CHAINING______________
!     !       !       !             !
! I0  ! you0  ! them  ! themselves  !
! I0A ! you0A ! themA ! themselvesA !
!_____!_______!_______!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: them
            chaining_n_to_n(themselves, them)
                sc(themselves, them) = True
                agr(themselves, them) = True
                rnr(themselves, them) = True
                chaining_e_to_n(themselvesA, them)
                    agr(themselvesA, them) = True
                    new_chain(themselvesA, them)
                        new_chain: create themB
                        new_chain: create themB^themselvesA

_____________________CHAINING____________________
!     !       !                   !             !
! I0  ! you0  ! them              ! themselves  !
! I0A ! you0A ! themA             ! themselvesA !
!     !       ! themB^themselvesA !             !
!_____!_______!___________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(them)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(them)
        non_refl_chaining(them)
            chaining_n_to_n(them, themselves)
                sc(them, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, you0)
                sc(them, you0) = True
                agr(them, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(them, I0)
                sc(them, I0) = True
                agr(them, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, themselves)
                sc(you0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, them)
                sc(you0, them) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, themselves)
                sc(I0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, them)
                sc(I0, them) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.5b) It was difficult to sketch myself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!     !       !      !         !
! I0  ! you0  ! PHI  ! myself  !
! I0A ! you0A ! PHIA ! myselfA !
!_____!_______!______!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: PHI
            chaining_n_to_n(myself, PHI)
                sc(myself, PHI) = True
                agr(myself, PHI) = True
                rnr(myself, PHI) = True
                chaining_e_to_n(myselfA, PHI)
                    agr(myselfA, PHI) = True
                    new_chain(myselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^myselfA

________________CHAINING________________
!     !       !              !         !
! I0  ! you0  ! PHI          ! myself  !
! I0A ! you0A ! PHIA         ! myselfA !
!     !       ! PHIB^myselfA !         !
!_____!_______!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, myself)
                sc(PHI, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

___________________CHAINING__________________
!     !            !              !         !
! I0  ! you0       ! PHI          ! myself  !
! I0A ! you0A      ! PHIA         ! myselfA !
!     ! you0B^PHIA ! PHIB^myselfA !         !
!_____!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = True
                    new_chain(PHIB, I0)
                        new_chain: create I0C
                        new_chain: create I0C^PHIB

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
! I0C^PHIB !            !              !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, myself)
                sc(you0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, myself)
                sc(I0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.6b) It was difficult to sketch yourself.
#
################################################################

chaining
    init_table

_____________CHAINING_____________
!     !       !      !           !
! I0  ! you0  ! PHI  ! yourself  !
! I0A ! you0A ! PHIA ! yourselfA !
!_____!_______!______!___________!

    init_table: exiting
    chaining_n(yourself)
        refl_chaining(yourself)
            simplex_pred(yourself)
            simplex_pred: PHI
            chaining_n_to_n(yourself, PHI)
                sc(yourself, PHI) = True
                agr(yourself, PHI) = True
                rnr(yourself, PHI) = True
                chaining_e_to_n(yourselfA, PHI)
                    agr(yourselfA, PHI) = True
                    new_chain(yourselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^yourselfA

__________________CHAINING__________________
!     !       !                !           !
! I0  ! you0  ! PHI            ! yourself  !
! I0A ! you0A ! PHIA           ! yourselfA !
!     !       ! PHIB^yourselfA !           !
!_____!_______!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, yourself)
                sc(PHI, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

_____________________CHAINING____________________
!     !            !                !           !
! I0  ! you0       ! PHI            ! yourself  !
! I0A ! you0A      ! PHIA           ! yourselfA !
!     ! you0B^PHIA ! PHIB^yourselfA !           !
!_____!____________!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = True
                    new_chain(PHIB, you0)
                        new_chain: create you0C
                        new_chain: create you0C^PHIB

_____________________CHAINING____________________
!     !            !                !           !
! I0  ! you0       ! PHI            ! yourself  !
! I0A ! you0A      ! PHIA           ! yourselfA !
!     ! you0B^PHIA ! PHIB^yourselfA !           !
!     ! you0C^PHIB !                !           !
!_____!____________!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_______________________CHAINING_______________________
!          !            !                !           !
! I0       ! you0       ! PHI            ! yourself  !
! I0A      ! you0A      ! PHIA           ! yourselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^yourselfA !           !
!          ! you0C^PHIB !                !           !
!__________!____________!________________!___________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, yourself)
                sc(you0, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, yourself)
                sc(I0, yourself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.7b) *It was difficult to sketch himself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! PHI  ! himself  !
! I0A ! you0A ! PHIA ! himselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! PHI           ! himself  !
! I0A ! you0A ! PHIA          ! himselfA !
!     !       ! PHIB^himselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

____________________CHAINING___________________
!     !            !               !          !
! I0  ! you0       ! PHI           ! himself  !
! I0A ! you0A      ! PHIA          ! himselfA !
!     ! you0B^PHIA ! PHIB^himselfA !          !
!_____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

______________________CHAINING______________________
!          !            !               !          !
! I0       ! you0       ! PHI           ! himself  !
! I0A      ! you0A      ! PHIA          ! himselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^himselfA !          !
!__________!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, himself)
                sc(you0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, himself)
                sc(I0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.8b) *It was difficult to sketch herself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! PHI  ! herself  !
! I0A ! you0A ! PHIA ! herselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: PHI
            chaining_n_to_n(herself, PHI)
                sc(herself, PHI) = True
                agr(herself, PHI) = True
                rnr(herself, PHI) = True
                chaining_e_to_n(herselfA, PHI)
                    agr(herselfA, PHI) = True
                    new_chain(herselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^herselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! PHI           ! herself  !
! I0A ! you0A ! PHIA          ! herselfA !
!     !       ! PHIB^herselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, herself)
                sc(PHI, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

____________________CHAINING___________________
!     !            !               !          !
! I0  ! you0       ! PHI           ! herself  !
! I0A ! you0A      ! PHIA          ! herselfA !
!     ! you0B^PHIA ! PHIB^herselfA !          !
!_____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

______________________CHAINING______________________
!          !            !               !          !
! I0       ! you0       ! PHI           ! herself  !
! I0A      ! you0A      ! PHIA          ! herselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^herselfA !          !
!__________!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, herself)
                sc(you0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, herself)
                sc(I0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.9b) It was difficult to sketch ourselves.
#
################################################################

chaining
    init_table

______________CHAINING_____________
!     !       !      !            !
! I0  ! you0  ! PHI  ! ourselves  !
! I0A ! you0A ! PHIA ! ourselvesA !
!_____!_______!______!____________!

    init_table: exiting
    chaining_n(ourselves)
        refl_chaining(ourselves)
            simplex_pred(ourselves)
            simplex_pred: PHI
            chaining_n_to_n(ourselves, PHI)
                sc(ourselves, PHI) = True
                agr(ourselves, PHI) = True
                rnr(ourselves, PHI) = True
                chaining_e_to_n(ourselvesA, PHI)
                    agr(ourselvesA, PHI) = True
                    new_chain(ourselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^ourselvesA

___________________CHAINING___________________
!     !       !                 !            !
! I0  ! you0  ! PHI             ! ourselves  !
! I0A ! you0A ! PHIA            ! ourselvesA !
!     !       ! PHIB^ourselvesA !            !
!_____!_______!_________________!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, ourselves)
                sc(PHI, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

______________________CHAINING_____________________
!     !            !                 !            !
! I0  ! you0       ! PHI             ! ourselves  !
! I0A ! you0A      ! PHIA            ! ourselvesA !
!     ! you0B^PHIA ! PHIB^ourselvesA !            !
!_____!____________!_________________!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

________________________CHAINING________________________
!          !            !                 !            !
! I0       ! you0       ! PHI             ! ourselves  !
! I0A      ! you0A      ! PHIA            ! ourselvesA !
! I0B^PHIA ! you0B^PHIA ! PHIB^ourselvesA !            !
!__________!____________!_________________!____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, ourselves)
                sc(you0, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, ourselves)
                sc(I0, ourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.10b) It was difficult to sketch yourselves.
#
################################################################

chaining
    init_table

______________CHAINING______________
!     !       !      !             !
! I0  ! you0  ! PHI  ! yourselves  !
! I0A ! you0A ! PHIA ! yourselvesA !
!_____!_______!______!_____________!

    init_table: exiting
    chaining_n(yourselves)
        refl_chaining(yourselves)
            simplex_pred(yourselves)
            simplex_pred: PHI
            chaining_n_to_n(yourselves, PHI)
                sc(yourselves, PHI) = True
                agr(yourselves, PHI) = True
                rnr(yourselves, PHI) = True
                chaining_e_to_n(yourselvesA, PHI)
                    agr(yourselvesA, PHI) = True
                    new_chain(yourselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^yourselvesA

____________________CHAINING____________________
!     !       !                  !             !
! I0  ! you0  ! PHI              ! yourselves  !
! I0A ! you0A ! PHIA             ! yourselvesA !
!     !       ! PHIB^yourselvesA !             !
!_____!_______!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, yourselves)
                sc(PHI, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! PHI              ! yourselves  !
! I0A ! you0A      ! PHIA             ! yourselvesA !
!     ! you0B^PHIA ! PHIB^yourselvesA !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = True
                    new_chain(PHIB, you0)
                        new_chain: create you0C
                        new_chain: create you0C^PHIB

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! PHI              ! yourselves  !
! I0A ! you0A      ! PHIA             ! yourselvesA !
!     ! you0B^PHIA ! PHIB^yourselvesA !             !
!     ! you0C^PHIB !                  !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_________________________CHAINING_________________________
!          !            !                  !             !
! I0       ! you0       ! PHI              ! yourselves  !
! I0A      ! you0A      ! PHIA             ! yourselvesA !
! I0B^PHIA ! you0B^PHIA ! PHIB^yourselvesA !             !
!          ! you0C^PHIB !                  !             !
!__________!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, yourselves)
                sc(you0, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, yourselves)
                sc(I0, yourselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.11b) *It was difficult to sketch themselves.
#
################################################################

chaining
    init_table

______________CHAINING______________
!     !       !      !             !
! I0  ! you0  ! PHI  ! themselves  !
! I0A ! you0A ! PHIA ! themselvesA !
!_____!_______!______!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: PHI
            chaining_n_to_n(themselves, PHI)
                sc(themselves, PHI) = True
                agr(themselves, PHI) = True
                rnr(themselves, PHI) = True
                chaining_e_to_n(themselvesA, PHI)
                    agr(themselvesA, PHI) = True
                    new_chain(themselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^themselvesA

____________________CHAINING____________________
!     !       !                  !             !
! I0  ! you0  ! PHI              ! themselves  !
! I0A ! you0A ! PHIA             ! themselvesA !
!     !       ! PHIB^themselvesA !             !
!_____!_______!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, themselves)
                sc(PHI, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! PHI              ! themselves  !
! I0A ! you0A      ! PHIA             ! themselvesA !
!     ! you0B^PHIA ! PHIB^themselvesA !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_________________________CHAINING_________________________
!          !            !                  !             !
! I0       ! you0       ! PHI              ! themselves  !
! I0A      ! you0A      ! PHIA             ! themselvesA !
! I0B^PHIA ! you0B^PHIA ! PHIB^themselvesA !             !
!__________!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, themselves)
                sc(you0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, themselves)
                sc(I0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.12a) Nurse Bob Breezy gave up drawing.
#
################################################################

chaining
    init_table

_______CHAINING_______
!     !       !      !
! I0  ! you0  ! Bob  !
! I0A ! you0A ! BobA !
!_____!_______!______!

    init_table: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, Bob)
                sc(you0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, Bob)
                sc(I0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.12b) [Bob] It was difficult to sketch himself.
#
################################################################

chaining
    init_table

________________CHAINING________________
!     !       !      !      !          !
! I0  ! you0  ! Bob  ! PHI  ! himself  !
! I0A ! you0A ! BobA ! PHIA ! himselfA !
!_____!_______!______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_____________________CHAINING____________________
!     !       !      !               !          !
! I0  ! you0  ! Bob  ! PHI           ! himself  !
! I0A ! you0A ! BobA ! PHIA          ! himselfA !
!     !       !      ! PHIB^himselfA !          !
!_____!_______!______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Bob)
                sc(PHI, Bob) = True
                agr(PHI, Bob) = True
                rnr(PHI, Bob) = True
                chaining_e_to_n(PHIA, Bob)
                    agr(PHIA, Bob) = True
                    new_chain(PHIA, Bob)
                        new_chain: create BobB
                        new_chain: create BobB^PHIA

_______________________CHAINING_______________________
!     !       !           !               !          !
! I0  ! you0  ! Bob       ! PHI           ! himself  !
! I0A ! you0A ! BobA      ! PHIA          ! himselfA !
!     !       ! BobB^PHIA ! PHIB^himselfA !          !
!_____!_______!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, Bob)
                    agr(PHIB, Bob) = True
                    new_chain(PHIB, Bob)
                        new_chain: create BobC
                        new_chain: create BobC^PHIB

_______________________CHAINING_______________________
!     !       !           !               !          !
! I0  ! you0  ! Bob       ! PHI           ! himself  !
! I0A ! you0A ! BobA      ! PHIA          ! himselfA !
!     !       ! BobB^PHIA ! PHIB^himselfA !          !
!     !       ! BobC^PHIB !               !          !
!_____!_______!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

__________________________CHAINING_________________________
!     !            !           !               !          !
! I0  ! you0       ! Bob       ! PHI           ! himself  !
! I0A ! you0A      ! BobA      ! PHIA          ! himselfA !
!     ! you0B^PHIA ! BobB^PHIA ! PHIB^himselfA !          !
!     !            ! BobC^PHIB !               !          !
!_____!____________!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

____________________________CHAINING____________________________
!          !            !           !               !          !
! I0       ! you0       ! Bob       ! PHI           ! himself  !
! I0A      ! you0A      ! BobA      ! PHIA          ! himselfA !
! I0B^PHIA ! you0B^PHIA ! BobB^PHIA ! PHIB^himselfA !          !
!          !            ! BobC^PHIB !               !          !
!__________!____________!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, himself)
                sc(you0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, Bob)
                sc(you0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, himself)
                sc(I0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, Bob)
                sc(I0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.13a) Astronaut Linda Smith gave up drawing.
#
################################################################

chaining
    init_table

________CHAINING________
!     !       !        !
! I0  ! you0  ! Linda  !
! I0A ! you0A ! LindaA !
!_____!_______!________!

    init_table: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, Linda)
                sc(you0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, Linda)
                sc(I0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.13b) [Linda] It was difficult to sketch herself.
#
################################################################

chaining
    init_table

_________________CHAINING_________________
!     !       !        !      !          !
! I0  ! you0  ! Linda  ! PHI  ! herself  !
! I0A ! you0A ! LindaA ! PHIA ! herselfA !
!_____!_______!________!______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: PHI
            chaining_n_to_n(herself, PHI)
                sc(herself, PHI) = True
                agr(herself, PHI) = True
                rnr(herself, PHI) = True
                chaining_e_to_n(herselfA, PHI)
                    agr(herselfA, PHI) = True
                    new_chain(herselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^herselfA

______________________CHAINING_____________________
!     !       !        !               !          !
! I0  ! you0  ! Linda  ! PHI           ! herself  !
! I0A ! you0A ! LindaA ! PHIA          ! herselfA !
!     !       !        ! PHIB^herselfA !          !
!_____!_______!________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, herself)
                sc(PHI, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Linda)
                sc(PHI, Linda) = True
                agr(PHI, Linda) = True
                rnr(PHI, Linda) = True
                chaining_e_to_n(PHIA, Linda)
                    agr(PHIA, Linda) = True
                    new_chain(PHIA, Linda)
                        new_chain: create LindaB
                        new_chain: create LindaB^PHIA

________________________CHAINING________________________
!     !       !             !               !          !
! I0  ! you0  ! Linda       ! PHI           ! herself  !
! I0A ! you0A ! LindaA      ! PHIA          ! herselfA !
!     !       ! LindaB^PHIA ! PHIB^herselfA !          !
!_____!_______!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, Linda)
                    agr(PHIB, Linda) = True
                    new_chain(PHIB, Linda)
                        new_chain: create LindaC
                        new_chain: create LindaC^PHIB

________________________CHAINING________________________
!     !       !             !               !          !
! I0  ! you0  ! Linda       ! PHI           ! herself  !
! I0A ! you0A ! LindaA      ! PHIA          ! herselfA !
!     !       ! LindaB^PHIA ! PHIB^herselfA !          !
!     !       ! LindaC^PHIB !               !          !
!_____!_______!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

___________________________CHAINING__________________________
!     !            !             !               !          !
! I0  ! you0       ! Linda       ! PHI           ! herself  !
! I0A ! you0A      ! LindaA      ! PHIA          ! herselfA !
!     ! you0B^PHIA ! LindaB^PHIA ! PHIB^herselfA !          !
!     !            ! LindaC^PHIB !               !          !
!_____!____________!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_____________________________CHAINING_____________________________
!          !            !             !               !          !
! I0       ! you0       ! Linda       ! PHI           ! herself  !
! I0A      ! you0A      ! LindaA      ! PHIA          ! herselfA !
! I0B^PHIA ! you0B^PHIA ! LindaB^PHIA ! PHIB^herselfA !          !
!          !            ! LindaC^PHIB !               !          !
!__________!____________!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, herself)
                sc(you0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, Linda)
                sc(you0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, herself)
                sc(I0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, Linda)
                sc(I0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.14a) The bank embezzlers gave up drawing.
#
################################################################

chaining
    init_table

___________CHAINING__________
!     !       !             !
! I0  ! you0  ! embezzlers  !
! I0A ! you0A ! embezzlersA !
!_____!_______!_____________!

    init_table: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, embezzlers)
                sc(you0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, embezzlers)
                sc(I0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.14b) [the bank embezzlers] It was difficult to sketch themselves.
#
################################################################

chaining
    init_table

_____________________CHAINING_____________________
!     !       !             !      !             !
! I0  ! you0  ! embezzlers  ! PHI  ! themselves  !
! I0A ! you0A ! embezzlersA ! PHIA ! themselvesA !
!_____!_______!_____________!______!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: PHI
            chaining_n_to_n(themselves, PHI)
                sc(themselves, PHI) = True
                agr(themselves, PHI) = True
                rnr(themselves, PHI) = True
                chaining_e_to_n(themselvesA, PHI)
                    agr(themselvesA, PHI) = True
                    new_chain(themselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^themselvesA

___________________________CHAINING___________________________
!     !       !             !                  !             !
! I0  ! you0  ! embezzlers  ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA ! PHIA             ! themselvesA !
!     !       !             ! PHIB^themselvesA !             !
!_____!_______!_____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, themselves)
                sc(PHI, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, embezzlers)
                sc(PHI, embezzlers) = True
                agr(PHI, embezzlers) = True
                rnr(PHI, embezzlers) = True
                chaining_e_to_n(PHIA, embezzlers)
                    agr(PHIA, embezzlers) = True
                    new_chain(PHIA, embezzlers)
                        new_chain: create embezzlersB
                        new_chain: create embezzlersB^PHIA

______________________________CHAINING_____________________________
!     !       !                  !                  !             !
! I0  ! you0  ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA      ! PHIA             ! themselvesA !
!     !       ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!_____!_______!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, embezzlers)
                    agr(PHIB, embezzlers) = True
                    new_chain(PHIB, embezzlers)
                        new_chain: create embezzlersC
                        new_chain: create embezzlersC^PHIB

______________________________CHAINING_____________________________
!     !       !                  !                  !             !
! I0  ! you0  ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA      ! PHIA             ! themselvesA !
!     !       ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!     !       ! embezzlersC^PHIB !                  !             !
!_____!_______!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

________________________________CHAINING________________________________
!     !            !                  !                  !             !
! I0  ! you0       ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A      ! embezzlersA      ! PHIA             ! themselvesA !
!     ! you0B^PHIA ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!     !            ! embezzlersC^PHIB !                  !             !
!_____!____________!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

___________________________________CHAINING__________________________________
!          !            !                  !                  !             !
! I0       ! you0       ! embezzlers       ! PHI              ! themselves  !
! I0A      ! you0A      ! embezzlersA      ! PHIA             ! themselvesA !
! I0B^PHIA ! you0B^PHIA ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!          !            ! embezzlersC^PHIB !                  !             !
!__________!____________!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, themselves)
                sc(you0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, embezzlers)
                sc(you0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, themselves)
                sc(I0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, embezzlers)
                sc(I0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.15) *It was difficult to sketch himself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! PHI  ! himself  !
! I0A ! you0A ! PHIA ! himselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! PHI           ! himself  !
! I0A ! you0A ! PHIA          ! himselfA !
!     !       ! PHIB^himselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

____________________CHAINING___________________
!     !            !               !          !
! I0  ! you0       ! PHI           ! himself  !
! I0A ! you0A      ! PHIA          ! himselfA !
!     ! you0B^PHIA ! PHIB^himselfA !          !
!_____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

______________________CHAINING______________________
!          !            !               !          !
! I0       ! you0       ! PHI           ! himself  !
! I0A      ! you0A      ! PHIA          ! himselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^himselfA !          !
!__________!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, himself)
                sc(you0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, himself)
                sc(I0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.16) *It was difficult to sketch herself.
#
################################################################

chaining
    init_table

_____________CHAINING____________
!     !       !      !          !
! I0  ! you0  ! PHI  ! herself  !
! I0A ! you0A ! PHIA ! herselfA !
!_____!_______!______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: PHI
            chaining_n_to_n(herself, PHI)
                sc(herself, PHI) = True
                agr(herself, PHI) = True
                rnr(herself, PHI) = True
                chaining_e_to_n(herselfA, PHI)
                    agr(herselfA, PHI) = True
                    new_chain(herselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^herselfA

_________________CHAINING_________________
!     !       !               !          !
! I0  ! you0  ! PHI           ! herself  !
! I0A ! you0A ! PHIA          ! herselfA !
!     !       ! PHIB^herselfA !          !
!_____!_______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, herself)
                sc(PHI, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

____________________CHAINING___________________
!     !            !               !          !
! I0  ! you0       ! PHI           ! herself  !
! I0A ! you0A      ! PHIA          ! herselfA !
!     ! you0B^PHIA ! PHIB^herselfA !          !
!_____!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

______________________CHAINING______________________
!          !            !               !          !
! I0       ! you0       ! PHI           ! herself  !
! I0A      ! you0A      ! PHIA          ! herselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^herselfA !          !
!__________!____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, herself)
                sc(you0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, herself)
                sc(I0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.17) *It was difficult to sketch themselves.
#
################################################################

chaining
    init_table

______________CHAINING______________
!     !       !      !             !
! I0  ! you0  ! PHI  ! themselves  !
! I0A ! you0A ! PHIA ! themselvesA !
!_____!_______!______!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: PHI
            chaining_n_to_n(themselves, PHI)
                sc(themselves, PHI) = True
                agr(themselves, PHI) = True
                rnr(themselves, PHI) = True
                chaining_e_to_n(themselvesA, PHI)
                    agr(themselvesA, PHI) = True
                    new_chain(themselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^themselvesA

____________________CHAINING____________________
!     !       !                  !             !
! I0  ! you0  ! PHI              ! themselves  !
! I0A ! you0A ! PHIA             ! themselvesA !
!     !       ! PHIB^themselvesA !             !
!_____!_______!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, themselves)
                sc(PHI, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

_______________________CHAINING______________________
!     !            !                  !             !
! I0  ! you0       ! PHI              ! themselves  !
! I0A ! you0A      ! PHIA             ! themselvesA !
!     ! you0B^PHIA ! PHIB^themselvesA !             !
!_____!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_________________________CHAINING_________________________
!          !            !                  !             !
! I0       ! you0       ! PHI              ! themselves  !
! I0A      ! you0A      ! PHIA             ! themselvesA !
! I0B^PHIA ! you0B^PHIA ! PHIB^themselvesA !             !
!__________!____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, themselves)
                sc(you0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, themselves)
                sc(I0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.18) [Bob] It was difficult to sketch himself.
#
################################################################

chaining
    init_table

________________CHAINING________________
!     !       !      !      !          !
! I0  ! you0  ! Bob  ! PHI  ! himself  !
! I0A ! you0A ! BobA ! PHIA ! himselfA !
!_____!_______!______!______!__________!

    init_table: exiting
    chaining_n(himself)
        refl_chaining(himself)
            simplex_pred(himself)
            simplex_pred: PHI
            chaining_n_to_n(himself, PHI)
                sc(himself, PHI) = True
                agr(himself, PHI) = True
                rnr(himself, PHI) = True
                chaining_e_to_n(himselfA, PHI)
                    agr(himselfA, PHI) = True
                    new_chain(himselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^himselfA

_____________________CHAINING____________________
!     !       !      !               !          !
! I0  ! you0  ! Bob  ! PHI           ! himself  !
! I0A ! you0A ! BobA ! PHIA          ! himselfA !
!     !       !      ! PHIB^himselfA !          !
!_____!_______!______!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, himself)
                sc(PHI, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Bob)
                sc(PHI, Bob) = True
                agr(PHI, Bob) = True
                rnr(PHI, Bob) = True
                chaining_e_to_n(PHIA, Bob)
                    agr(PHIA, Bob) = True
                    new_chain(PHIA, Bob)
                        new_chain: create BobB
                        new_chain: create BobB^PHIA

_______________________CHAINING_______________________
!     !       !           !               !          !
! I0  ! you0  ! Bob       ! PHI           ! himself  !
! I0A ! you0A ! BobA      ! PHIA          ! himselfA !
!     !       ! BobB^PHIA ! PHIB^himselfA !          !
!_____!_______!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, Bob)
                    agr(PHIB, Bob) = True
                    new_chain(PHIB, Bob)
                        new_chain: create BobC
                        new_chain: create BobC^PHIB

_______________________CHAINING_______________________
!     !       !           !               !          !
! I0  ! you0  ! Bob       ! PHI           ! himself  !
! I0A ! you0A ! BobA      ! PHIA          ! himselfA !
!     !       ! BobB^PHIA ! PHIB^himselfA !          !
!     !       ! BobC^PHIB !               !          !
!_____!_______!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

__________________________CHAINING_________________________
!     !            !           !               !          !
! I0  ! you0       ! Bob       ! PHI           ! himself  !
! I0A ! you0A      ! BobA      ! PHIA          ! himselfA !
!     ! you0B^PHIA ! BobB^PHIA ! PHIB^himselfA !          !
!     !            ! BobC^PHIB !               !          !
!_____!____________!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

____________________________CHAINING____________________________
!          !            !           !               !          !
! I0       ! you0       ! Bob       ! PHI           ! himself  !
! I0A      ! you0A      ! BobA      ! PHIA          ! himselfA !
! I0B^PHIA ! you0B^PHIA ! BobB^PHIA ! PHIB^himselfA !          !
!          !            ! BobC^PHIB !               !          !
!__________!____________!___________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, himself)
                sc(you0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, Bob)
                sc(you0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, himself)
                sc(I0, himself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, Bob)
                sc(I0, Bob) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.19) [Linda] It was difficult to sketch herself.
#
################################################################

chaining
    init_table

_________________CHAINING_________________
!     !       !        !      !          !
! I0  ! you0  ! Linda  ! PHI  ! herself  !
! I0A ! you0A ! LindaA ! PHIA ! herselfA !
!_____!_______!________!______!__________!

    init_table: exiting
    chaining_n(herself)
        refl_chaining(herself)
            simplex_pred(herself)
            simplex_pred: PHI
            chaining_n_to_n(herself, PHI)
                sc(herself, PHI) = True
                agr(herself, PHI) = True
                rnr(herself, PHI) = True
                chaining_e_to_n(herselfA, PHI)
                    agr(herselfA, PHI) = True
                    new_chain(herselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^herselfA

______________________CHAINING_____________________
!     !       !        !               !          !
! I0  ! you0  ! Linda  ! PHI           ! herself  !
! I0A ! you0A ! LindaA ! PHIA          ! herselfA !
!     !       !        ! PHIB^herselfA !          !
!_____!_______!________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, herself)
                sc(PHI, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, Linda)
                sc(PHI, Linda) = True
                agr(PHI, Linda) = True
                rnr(PHI, Linda) = True
                chaining_e_to_n(PHIA, Linda)
                    agr(PHIA, Linda) = True
                    new_chain(PHIA, Linda)
                        new_chain: create LindaB
                        new_chain: create LindaB^PHIA

________________________CHAINING________________________
!     !       !             !               !          !
! I0  ! you0  ! Linda       ! PHI           ! herself  !
! I0A ! you0A ! LindaA      ! PHIA          ! herselfA !
!     !       ! LindaB^PHIA ! PHIB^herselfA !          !
!_____!_______!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, Linda)
                    agr(PHIB, Linda) = True
                    new_chain(PHIB, Linda)
                        new_chain: create LindaC
                        new_chain: create LindaC^PHIB

________________________CHAINING________________________
!     !       !             !               !          !
! I0  ! you0  ! Linda       ! PHI           ! herself  !
! I0A ! you0A ! LindaA      ! PHIA          ! herselfA !
!     !       ! LindaB^PHIA ! PHIB^herselfA !          !
!     !       ! LindaC^PHIB !               !          !
!_____!_______!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

___________________________CHAINING__________________________
!     !            !             !               !          !
! I0  ! you0       ! Linda       ! PHI           ! herself  !
! I0A ! you0A      ! LindaA      ! PHIA          ! herselfA !
!     ! you0B^PHIA ! LindaB^PHIA ! PHIB^herselfA !          !
!     !            ! LindaC^PHIB !               !          !
!_____!____________!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_____________________________CHAINING_____________________________
!          !            !             !               !          !
! I0       ! you0       ! Linda       ! PHI           ! herself  !
! I0A      ! you0A      ! LindaA      ! PHIA          ! herselfA !
! I0B^PHIA ! you0B^PHIA ! LindaB^PHIA ! PHIB^herselfA !          !
!          !            ! LindaC^PHIB !               !          !
!__________!____________!_____________!_______________!__________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, herself)
                sc(you0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, Linda)
                sc(you0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, herself)
                sc(I0, herself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, Linda)
                sc(I0, Linda) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.20) [the bank embezzlers] It was difficult to sketch themselves.
#
################################################################

chaining
    init_table

_____________________CHAINING_____________________
!     !       !             !      !             !
! I0  ! you0  ! embezzlers  ! PHI  ! themselves  !
! I0A ! you0A ! embezzlersA ! PHIA ! themselvesA !
!_____!_______!_____________!______!_____________!

    init_table: exiting
    chaining_n(themselves)
        refl_chaining(themselves)
            simplex_pred(themselves)
            simplex_pred: PHI
            chaining_n_to_n(themselves, PHI)
                sc(themselves, PHI) = True
                agr(themselves, PHI) = True
                rnr(themselves, PHI) = True
                chaining_e_to_n(themselvesA, PHI)
                    agr(themselvesA, PHI) = True
                    new_chain(themselvesA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^themselvesA

___________________________CHAINING___________________________
!     !       !             !                  !             !
! I0  ! you0  ! embezzlers  ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA ! PHIA             ! themselvesA !
!     !       !             ! PHIB^themselvesA !             !
!_____!_______!_____________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, themselves)
                sc(PHI, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, embezzlers)
                sc(PHI, embezzlers) = True
                agr(PHI, embezzlers) = True
                rnr(PHI, embezzlers) = True
                chaining_e_to_n(PHIA, embezzlers)
                    agr(PHIA, embezzlers) = True
                    new_chain(PHIA, embezzlers)
                        new_chain: create embezzlersB
                        new_chain: create embezzlersB^PHIA

______________________________CHAINING_____________________________
!     !       !                  !                  !             !
! I0  ! you0  ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA      ! PHIA             ! themselvesA !
!     !       ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!_____!_______!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, embezzlers)
                    agr(PHIB, embezzlers) = True
                    new_chain(PHIB, embezzlers)
                        new_chain: create embezzlersC
                        new_chain: create embezzlersC^PHIB

______________________________CHAINING_____________________________
!     !       !                  !                  !             !
! I0  ! you0  ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A ! embezzlersA      ! PHIA             ! themselvesA !
!     !       ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!     !       ! embezzlersC^PHIB !                  !             !
!_____!_______!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

________________________________CHAINING________________________________
!     !            !                  !                  !             !
! I0  ! you0       ! embezzlers       ! PHI              ! themselves  !
! I0A ! you0A      ! embezzlersA      ! PHIA             ! themselvesA !
!     ! you0B^PHIA ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!     !            ! embezzlersC^PHIB !                  !             !
!_____!____________!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

___________________________________CHAINING__________________________________
!          !            !                  !                  !             !
! I0       ! you0       ! embezzlers       ! PHI              ! themselves  !
! I0A      ! you0A      ! embezzlersA      ! PHIA             ! themselvesA !
! I0B^PHIA ! you0B^PHIA ! embezzlersB^PHIA ! PHIB^themselvesA !             !
!          !            ! embezzlersC^PHIB !                  !             !
!__________!____________!__________________!__________________!_____________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, themselves)
                sc(you0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, embezzlers)
                sc(you0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, themselves)
                sc(I0, themselves) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, embezzlers)
                sc(I0, embezzlers) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.21) It was difficult to sketch myself.
#
################################################################

chaining
    init_table

____________CHAINING____________
!     !       !      !         !
! I0  ! you0  ! PHI  ! myself  !
! I0A ! you0A ! PHIA ! myselfA !
!_____!_______!______!_________!

    init_table: exiting
    chaining_n(myself)
        refl_chaining(myself)
            simplex_pred(myself)
            simplex_pred: PHI
            chaining_n_to_n(myself, PHI)
                sc(myself, PHI) = True
                agr(myself, PHI) = True
                rnr(myself, PHI) = True
                chaining_e_to_n(myselfA, PHI)
                    agr(myselfA, PHI) = True
                    new_chain(myselfA, PHI)
                        new_chain: create PHIB
                        new_chain: create PHIB^myselfA

________________CHAINING________________
!     !       !              !         !
! I0  ! you0  ! PHI          ! myself  !
! I0A ! you0A ! PHIA         ! myselfA !
!     !       ! PHIB^myselfA !         !
!_____!_______!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            simplex_pred(PHI)
            simplex_pred: 
        refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, myself)
                sc(PHI, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

___________________CHAINING__________________
!     !            !              !         !
! I0  ! you0       ! PHI          ! myself  !
! I0A ! you0A      ! PHIA         ! myselfA !
!     ! you0B^PHIA ! PHIB^myselfA !         !
!_____!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, you0)
                    agr(PHIB, you0) = False
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^PHIA

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
                chaining_e_to_n(PHIB, I0)
                    agr(PHIB, I0) = True
                    new_chain(PHIB, I0)
                        new_chain: create I0C
                        new_chain: create I0C^PHIB

_____________________CHAINING_____________________
!          !            !              !         !
! I0       ! you0       ! PHI          ! myself  !
! I0A      ! you0A      ! PHIA         ! myselfA !
! I0B^PHIA ! you0B^PHIA ! PHIB^myselfA !         !
! I0C^PHIB !            !              !         !
!__________!____________!______________!_________!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, myself)
                sc(you0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, myself)
                sc(I0, myself) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting

################################################################
#
#     (13.22) [toy] Give me that!
#
################################################################

chaining
    init_table

__________________CHAINING_________________
!     !       !      !      !     !       !
! I0  ! you0  ! toy  ! PHI  ! me  ! that  !
! I0A ! you0A ! toyA ! PHIA ! meA ! thatA !
!_____!_______!______!______!_____!_______!

    init_table: exiting
    chaining_n(that)
        non_refl_chaining(that)
            chaining_n_to_n(that, me)
                sc(that, me) = True
                agr(that, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(that, PHI)
                sc(that, PHI) = True
                agr(that, PHI) = True
                rnr(that, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(that, toy)
                sc(that, toy) = True
                agr(that, toy) = True
                rnr(that, toy) = True
                chaining_e_to_n(thatA, toy)
                    agr(thatA, toy) = True
                    new_chain(thatA, toy)
                        new_chain: create toyB
                        new_chain: create toyB^thatA

_____________________CHAINING____________________
!     !       !            !      !     !       !
! I0  ! you0  ! toy        ! PHI  ! me  ! that  !
! I0A ! you0A ! toyA       ! PHIA ! meA ! thatA !
!     !       ! toyB^thatA !      !     !       !
!_____!_______!____________!______!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(that, you0)
                sc(that, you0) = True
                agr(that, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(that, I0)
                sc(that, I0) = True
                agr(that, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(me)
        non_refl_chaining(me)
            chaining_n_to_n(me, that)
                sc(me, that) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, PHI)
                sc(me, PHI) = True
                agr(me, PHI) = True
                rnr(me, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, toy)
                sc(me, toy) = True
                agr(me, toy) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, you0)
                sc(me, you0) = True
                agr(me, you0) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(me, I0)
                sc(me, I0) = True
                agr(me, I0) = True
                rnr(me, I0) = True
                chaining_e_to_n(meA, I0)
                    agr(meA, I0) = True
                    new_chain(meA, I0)
                        new_chain: create I0B
                        new_chain: create I0B^meA

_______________________CHAINING______________________
!         !       !            !      !     !       !
! I0      ! you0  ! toy        ! PHI  ! me  ! that  !
! I0A     ! you0A ! toyA       ! PHIA ! meA ! thatA !
! I0B^meA !       ! toyB^thatA !      !     !       !
!_________!_______!____________!______!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(PHI)
        non_refl_chaining(PHI)
            chaining_n_to_n(PHI, that)
                sc(PHI, that) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, me)
                sc(PHI, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, toy)
                sc(PHI, toy) = True
                agr(PHI, toy) = True
                rnr(PHI, toy) = True
                chaining_e_to_n(PHIA, toy)
                    agr(PHIA, toy) = True
                    new_chain(PHIA, toy)
                        new_chain: create toyC
                        new_chain: create toyC^PHIA

_______________________CHAINING______________________
!         !       !            !      !     !       !
! I0      ! you0  ! toy        ! PHI  ! me  ! that  !
! I0A     ! you0A ! toyA       ! PHIA ! meA ! thatA !
! I0B^meA !       ! toyB^thatA !      !     !       !
!         !       ! toyC^PHIA  !      !     !       !
!_________!_______!____________!______!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, you0)
                sc(PHI, you0) = True
                agr(PHI, you0) = True
                rnr(PHI, you0) = True
                chaining_e_to_n(PHIA, you0)
                    agr(PHIA, you0) = True
                    new_chain(PHIA, you0)
                        new_chain: create you0B
                        new_chain: create you0B^PHIA

_________________________CHAINING_________________________
!         !            !            !      !     !       !
! I0      ! you0       ! toy        ! PHI  ! me  ! that  !
! I0A     ! you0A      ! toyA       ! PHIA ! meA ! thatA !
! I0B^meA ! you0B^PHIA ! toyB^thatA !      !     !       !
!         !            ! toyC^PHIA  !      !     !       !
!_________!____________!____________!______!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
            chaining_n_to_n(PHI, I0)
                sc(PHI, I0) = True
                agr(PHI, I0) = True
                rnr(PHI, I0) = True
                chaining_e_to_n(PHIA, I0)
                    agr(PHIA, I0) = True
                    new_chain(PHIA, I0)
                        new_chain: create I0C
                        new_chain: create I0C^PHIA

__________________________CHAINING_________________________
!          !            !            !      !     !       !
! I0       ! you0       ! toy        ! PHI  ! me  ! that  !
! I0A      ! you0A      ! toyA       ! PHIA ! meA ! thatA !
! I0B^meA  ! you0B^PHIA ! toyB^thatA !      !     !       !
! I0C^PHIA !            ! toyC^PHIA  !      !     !       !
!__________!____________!____________!______!_____!_______!

                    new_chain: exiting
                chaining_e_to_n: exiting
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(you0)
        non_refl_chaining(you0)
            chaining_n_to_n(you0, that)
                sc(you0, that) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, me)
                sc(you0, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, PHI)
                sc(you0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, toy)
                sc(you0, toy) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(you0, I0)
                sc(you0, I0) = True
                agr(you0, I0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
    chaining_n(I0)
        non_refl_chaining(I0)
            chaining_n_to_n(I0, that)
                sc(I0, that) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, me)
                sc(I0, me) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, PHI)
                sc(I0, PHI) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, toy)
                sc(I0, toy) = False
            chaining_n_to_n: exiting
            chaining_n_to_n(I0, you0)
                sc(I0, you0) = False
            chaining_n_to_n: exiting
        non_refl_chaining: exiting
    chaining_n: exiting
chaining: exiting
